{"version":3,"sources":["webpack:///./node_modules/cross-fetch/dist/browser-ponyfill.js","webpack:///./node_modules/@inrupt/solid-client/dist/index.es.js","webpack:///./node_modules/@rdfjs/dataset/index.js","webpack:///./node_modules/@rdfjs/dataset/DatasetCore.js","webpack:///./node_modules/@rdfjs/dataset/isMatch.js"],"names":["__self__","root","F","this","fetch","DOMException","prototype","self","exports","support","searchParams","iterable","Symbol","blob","Blob","e","formData","arrayBuffer","isDataView","obj","DataView","isPrototypeOf","viewClasses","isArrayBufferView","ArrayBuffer","isView","indexOf","Object","toString","call","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","value","iteratorFor","items","iterator","next","shift","done","undefined","Headers","headers","map","forEach","append","Array","isArray","header","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","result","onerror","error","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","buf","view","Uint8Array","chars","length","i","fromCharCode","join","bufferClone","slice","byteLength","set","buffer","Body","_initBody","_bodyInit","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","get","type","rejected","Error","then","text","decode","json","JSON","parse","oldValue","has","hasOwnProperty","callback","thisArg","keys","push","values","entries","methods","normalizeMethod","method","upcased","toUpperCase","Request","input","options","url","credentials","mode","signal","referrer","form","trim","split","bytes","replace","decodeURIComponent","parseHeaders","rawHeaders","preProcessedHeaders","line","parts","key","Response","bodyInit","status","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","err","message","stack","create","constructor","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","default","module","hasResourceInfo","resource","potentialResourceInfo","internal_resourceInfo","hasServerResourceInfo","linkedResources","hasChangelog","dataset","potentialChangeLog","internal_changeLog","additions","deletions","SolidClientError","internal_toIriString","iri","async","quad","literal","namedNode","blankNode","DataFactory","output","add","filter","internal_parseResourceInfo","_a","_b","_c","contentTypeParts","isSolidDataset","includes","resourceInfo","sourceIri","isRawData","contentType","linkHeader","parsedLinks","aclLinks","aclUrl","URL","uri","href","refs","reduce","rels","ref","rel","wacAllowHeader","permissions","parseWacAllowHeader","parsePermissionStatement","permissionStatement","writePermission","read","write","control","getStatementFor","scope","relevantEntries","rawEntry","relevantStatement","charAt","substring","user","public","internal_cloneResource","clonedResource","match","assign","copyNonClassProperties","source","copy","internal_isUnsuccessfulResponse","internal_defaultFetchOptions","getResourceInfo","config","FetchError","getSourceUrl","errorResponse","super","statusCode","defaultGetFileOptions","getFile","data","fileWithResourceInfo","triplesToTurtle","quads","n3","loadN3","format","writer","Writer","triples","subject","predicate","object","addQuads","writePromise","end","rawTurtle","turtleToTriples","raw","resourceIri","parser","Parser","baseIRI","parsingPromise","parsedTriples","triple","_prefixes","n3Module","xmlSchemaTypes","boolean","dateTime","decimal","integer","string","langString","deserializeBoolean","deserializeDatetime","literalString","datetimeRegEx","signedDateString","rest","yearMultiplier","dateString","yearString","monthString","dayString","utcFullYear","Number","parseInt","utcMonth","utcDate","timeString","timezoneString","splitTimeFromTimezone","hourOffset","minuteOffset","getTimezoneOffsets","hourString","minuteString","timeRest","utcHours","utcMinutes","secondString","optionalMillisecondString","utcSeconds","utcMilliseconds","date","Date","UTC","setUTCFullYear","getUTCFullYear","endsWith","splitOnPlus","splitOnMinus","multiplier","hours","minutes","deserializeDecimal","deserialized","parseFloat","isNaN","deserializeInteger","isNamedNode","isTerm","termType","isLiteral","equals","isLocalNode","internal_name","getLocalNode","localNode","internal_isValidUrl","iriString","asNamedNode","ValidUrlExpectedError","isEqual","node1","node2","namedNode1","resolveIriForLocalNode","namedNode2","resolveIriForLocalNodes","resolveLocalIri","thingIri","hash","receivedValue","internal_isDatasetCore","size","delete","from","internal_getReadableValue","_d","_e","_f","_g","_h","datatype","val","valueOf","toUTCString","language","internal_toNode","thing","isThingLocal","internal_localSubject","asUrl","internal_cloneThing","cloned","internal_url","internal_filterThing","filtered","internal_throwIfNotThing","isThing","ThingExpectedError","getUrl","property","namedNodeMatcher","getNamedNodeMatcher","matchingQuad","findOne","getUrlAll","iriMatcher","matchingQuads","findAll","getIriAll","getTermAll","getTermMatcher","matcher","matched","ValidPropertyUrlExpectedError","predicateNode","getThing","solidDataset","thingUrl","ValidThingUrlExpectedError","thingDataset","getThingAll","subjectNodes","quadSubject","some","subjectNode","things","setThing","newDataset","removeThing","deletion","newSolidDataset","withChangeLog","thingSubject","existingQuads","addition","createThing","generateName","localSubject","baseUrl","asIri","thingAsMarkdown","predicates","Set","receivedProperty","ValidValueUrlExpectedError","now","Math","random","createSolidDataset","getSolidDataset","Accept","resourceWithResourceInfo","prepareSolidDatasetUpdate","deleteStatement","getNamedNodesForLocalNodes","insertStatement","prepareSolidDatasetCreation","Link","saveSolidDatasetAt","requestInit","isUpdate","diagnostics","changeLogAsMarkdown","solidDatasetAsMarkdown","storedDataset","storedDatasetWithResolvedIris","resolveLocalIrisInSolidDataset","readableSolidDataset","getReadableChangeLogSummary","readableChangeLog","changeLogsByThingAndProperty","sortChangeLogByThingAndProperty","changeLogByProperty","propertyUrl","deleted","added","deletedValue","addedValue","nrOfAdditions","count","nrOfDeletions","additionString","deletionString","getNamedNodeFromLocalNode","unresolvedQuads","unresolvedQuad","resolvedQuad","mockSolidDatasetFrom","solidDatasetWithResourceInfo","addUrl","newThing","addIri","removeAll","updatedThing","removeUrl","iriNode","removeIri","setUrl","setIri","rdf","acp","Policy","AccessControl","Read","Append","Write","Rule","accessControl","apply","applyMembers","allow","deny","allOf","anyOf","noneOf","access","accessMembers","agent","group","PublicAgent","AuthenticatedAgent","CreatorAgent","internal_fetchAcl","hasAccessibleAcl","resourceAcl","fallbackAcl","internal_fetchResourceAcl","acl","internal_fetchFallbackAcl","aclSolidDataset","internal_accessTo","resourceUrl","resourcePath","pathname","containerPath","internal_getContainerPath","containerIri","origin","containerInfo","containerAcl","resourcePathWithoutTrailingSlash","lastIndexOf","internal_getAcr","hasAccessibleAcr","internal_acp","acr","internal_setAcr","internal_createControl","internal_getControl","withAccessControlResource","foundThing","internal_getControlAll","foundThings","internal_setControl","updatedAcr","updatedResource","internal_addPolicyUrl","policyUrl","internal_getPolicyUrlAll","internal_removePolicyUrl","internal_removePolicyUrlAll","internal_addMemberPolicyUrl","internal_getMemberPolicyUrlAll","internal_removeMemberPolicyUrl","internal_removeMemberPolicyUrlAll","internal_getInitialisedControl","resourceWithAcr","allControls","hasLinkedAcr","addAcrPolicyUrl","acrUrl","acrThing","addMemberAcrPolicyUrl","getAcrPolicyUrlAll","getMemberAcrPolicyUrlAll","removeAcrPolicyUrl","updatedAcrThing","removeMemberAcrPolicyUrl","removeAcrPolicyUrlAll","removeMemberAcrPolicyUrlAll","addPolicyUrl","updatedControl","addMemberPolicyUrl","getPolicyUrlAll","controls","policyUrlsByControl","uniquePolicyUrls","policyUrls","getMemberPolicyUrlAll","memberPolicyUrlsByControl","removePolicyUrl","updatedControls","removeMemberPolicyUrl","removePolicyUrlAll","removeMemberPolicyUrlAll","acrAsMarkdown","markdown","memberPolicyUrls","acrPolicyUrls","memberAcrPolicyUrls","acpControl","freeze","__proto__","getSolidDatasetWithAcr","urlString","fetchAcr","getFileWithAcr","file","getResourceInfoWithAcr","getSolidDatasetWithAccessDatasets","internal_acl","getFileWithAccessDatasets","getResourceInfoWithAccessDatasets","saveAcrFor","savedAcr","acrDataset","accessTo","acpInfo","getReferencedPolicyUrlAll","withAcr","getResourceUrl","concat","uniqueUrls","urlWithHash","acpAcp","isRule","addRequiredRuleUrl","policy","rule","removeRequiredRuleUrl","setRequiredRuleUrl","getRequiredRuleUrlAll","addOptionalRuleUrl","removeOptionalRuleUrl","setOptionalRuleUrl","getOptionalRuleUrlAll","addForbiddenRuleUrl","removeForbiddenRuleUrl","setForbiddenRuleUrl","getForbiddenRuleurlAll","createRule","stringUrl","ruleThing","getRule","ruleResource","getRuleAll","setRule","getAgentAll","setAgent","isPublic","hasPublic","isAuthenticated","hasAuthenticated","setPublic","setAuthenticated","addAgent","removeAgent","getGroupAll","setGroup","addGroup","removeGroup","authenticated","hasCreator","setCreator","creator","ruleAsMarkdown","targetEnumeration","targetAgents","targetGroups","acpRule","createPolicy","policyThing","getPolicy","policyResource","getPolicyAll","foundPolicies","removePolicy","setPolicy","setAllowModes","modes","newPolicy","getAllowModes","allowedModes","setDenyModes","getDenyModes","deniedModes","policyAsMarkdown","getStatus","allowModes","denyModes","requiredRules","optionalRules","forbiddenRules","acpPolicy","mockAcrFor","addMockAcrTo","accessControlResource","aprs","acpMock","v1ControlFunctions","deprecatedFunctions","createControl","getControl","getAllControl","setControl","removeControl","DatasetCore","isMatch","localQuad","graph","other","matches"],"mappings":"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","file":"js/chunk-782eadc0.ddbc389d.js","sourcesContent":["var __self__ = (function (root) {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = root.DOMException\n}\nF.prototype = root;\nreturn new F();\n})(typeof self !== 'undefined' ? self : this);\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  return exports;\n\n}({}));\n})(__self__);\ndelete __self__.fetch.polyfill\nexports = __self__.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = __self__.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = __self__.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = __self__.Headers\nexports.Request = __self__.Request\nexports.Response = __self__.Response\nmodule.exports = exports\n","import LinkHeader from 'http-link-header';\nimport rdfjsDataset from '@rdfjs/dataset';\nimport * as crossFetch from 'cross-fetch';\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Verify whether a given SolidDataset includes metadata about where it was sent to.\r\n *\r\n * @param dataset A [[SolidDataset]] that may have metadata attached about the Resource it was retrieved from.\r\n * @returns True if `dataset` includes metadata about the Resource it was sent to, false if not.\r\n * @since 0.2.0\r\n */\r\nfunction hasResourceInfo(resource) {\r\n    const potentialResourceInfo = resource;\r\n    return (typeof potentialResourceInfo === \"object\" &&\r\n        typeof potentialResourceInfo.internal_resourceInfo === \"object\");\r\n}\r\n/**\r\n * Verify whether a given SolidDataset includes metadata about where it was retrieved from.\r\n *\r\n * @param dataset A [[SolidDataset]] that may have metadata attached about the Resource it was retrieved from.\r\n * @returns True if `dataset` includes metadata about the Resource it was retrieved from, false if not.\r\n * @since 0.6.0\r\n */\r\nfunction hasServerResourceInfo(resource) {\r\n    const potentialResourceInfo = resource;\r\n    return (typeof potentialResourceInfo === \"object\" &&\r\n        typeof potentialResourceInfo.internal_resourceInfo === \"object\" &&\r\n        typeof potentialResourceInfo.internal_resourceInfo.linkedResources ===\r\n            \"object\");\r\n}\r\n/** @internal */\r\nfunction hasChangelog(dataset) {\r\n    const potentialChangeLog = dataset;\r\n    return (typeof potentialChangeLog.internal_changeLog === \"object\" &&\r\n        Array.isArray(potentialChangeLog.internal_changeLog.additions) &&\r\n        Array.isArray(potentialChangeLog.internal_changeLog.deletions));\r\n}\r\n/**\r\n * Errors thrown by solid-client extend this class, and can thereby be distinguished from errors\r\n * thrown in lower-level libraries.\r\n * @since 1.2.0\r\n */\r\nclass SolidClientError extends Error {\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/** @internal */\r\nfunction internal_toIriString(iri) {\r\n    return typeof iri === \"string\" ? iri : iri.value;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * @ignore Internal fallback for when no fetcher is provided; not to be used downstream.\r\n */\r\nconst fetch = async (resource, init) => {\r\n    /* istanbul ignore if: `require` is always defined in the unit test environment */\r\n    if (typeof window === \"object\" && typeof require !== \"function\") {\r\n        return await window.fetch(resource, init);\r\n    }\r\n    /* istanbul ignore if: `require` is always defined in the unit test environment */\r\n    if (typeof require !== \"function\") {\r\n        // When using Node.js with ES Modules, require is not defined:\r\n        const crossFetchModule = await import('cross-fetch');\r\n        const fetch = crossFetchModule.default;\r\n        return fetch(resource, init);\r\n    }\r\n    // Implementation note: it's up to the client application to resolve these module names to the\r\n    // respective npm packages. At least one commonly used tool (Webpack) is only able to do that if\r\n    // the module names are literal strings.\r\n    // Additionally, Webpack throws a warning in a way that halts compilation for at least Next.js\r\n    // when using native Javascript dynamic imports (`import()`), whereas `require()` just logs a\r\n    // warning. Since the use of package names instead of file names requires a bundles anyway, this\r\n    // should not have any practical consequences. For more background, see:\r\n    // https://github.com/webpack/webpack/issues/7713\r\n    let fetch;\r\n    // Unfortunately solid-client-authn-browser does not support a default session yet.\r\n    // Once it does, we can auto-detect if it is available and use it as follows:\r\n    // try {\r\n    //   fetch = require(\"solid-client-authn-browser\").fetch;\r\n    // } catch (e) {\r\n    // When enabling the above, make sure to add a similar try {...} catch block using `import`\r\n    // statements in the elseif above.\r\n    // eslint-disable-next-line prefer-const\r\n    fetch = require(\"cross-fetch\");\r\n    // }\r\n    return await fetch(resource, init);\r\n};\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nconst dataset = rdfjsDataset.dataset;\r\nconst { quad, literal, namedNode, blankNode } = rdfjsDataset;\r\n/**\r\n * @internal\r\n */\r\nconst DataFactory = { quad, literal, namedNode, blankNode };\r\n/**\r\n * Clone a Dataset.\r\n *\r\n * Note that the Quads are not cloned, i.e. if you modify the Quads in the output Dataset, the Quads\r\n * in the input Dataset will also be changed.\r\n *\r\n * @internal\r\n * @param input Dataset to clone.\r\n * @returns A new Dataset with the same Quads as `input`.\r\n */\r\nfunction clone(input) {\r\n    const output = dataset();\r\n    for (const quad of input) {\r\n        output.add(quad);\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * @internal\r\n * @param input Dataset to clone.\r\n * @param callback Function that takes a Quad, and returns a boolean indicating whether that Quad should be included in the cloned Dataset.\r\n * @returns A new Dataset with the same Quads as `input`, excluding the ones for which `callback` returned `false`.\r\n */\r\nfunction filter(input, callback) {\r\n    const output = dataset();\r\n    for (const quad of input) {\r\n        if (callback(quad)) {\r\n            output.add(quad);\r\n        }\r\n    }\r\n    return output;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * @internal\r\n */\r\nfunction internal_parseResourceInfo(response) {\r\n    var _a, _b, _c;\r\n    const contentTypeParts = (_b = (_a = response.headers.get(\"Content-Type\")) === null || _a === void 0 ? void 0 : _a.split(\";\")) !== null && _b !== void 0 ? _b : [];\r\n    // If the server offers a Turtle or JSON-LD serialisation on its own accord,\r\n    // that tells us whether it is RDF data that the server can understand\r\n    // (and hence can be updated with a PATCH request with SPARQL INSERT and DELETE statements),\r\n    // in which case our SolidDataset-related functions should handle it.\r\n    // For more context, see https://github.com/inrupt/solid-client-js/pull/214.\r\n    const isSolidDataset = contentTypeParts.length > 0 &&\r\n        [\"text/turtle\", \"application/ld+json\"].includes(contentTypeParts[0]);\r\n    const resourceInfo = {\r\n        sourceIri: response.url,\r\n        isRawData: !isSolidDataset,\r\n        contentType: (_c = response.headers.get(\"Content-Type\")) !== null && _c !== void 0 ? _c : undefined,\r\n        linkedResources: {},\r\n    };\r\n    const linkHeader = response.headers.get(\"Link\");\r\n    if (linkHeader) {\r\n        const parsedLinks = LinkHeader.parse(linkHeader);\r\n        // Set ACL link\r\n        const aclLinks = parsedLinks.get(\"rel\", \"acl\");\r\n        if (aclLinks.length === 1) {\r\n            resourceInfo.aclUrl = new URL(aclLinks[0].uri, resourceInfo.sourceIri).href;\r\n        }\r\n        // Parse all link headers and expose them in a standard way\r\n        // (this can replace the parsing of the ACL link above):\r\n        resourceInfo.linkedResources = parsedLinks.refs.reduce((rels, ref) => {\r\n            var _a;\r\n            var _b;\r\n            (_a = rels[_b = ref.rel]) !== null && _a !== void 0 ? _a : (rels[_b] = []);\r\n            rels[ref.rel].push(new URL(ref.uri, resourceInfo.sourceIri).href);\r\n            return rels;\r\n        }, resourceInfo.linkedResources);\r\n    }\r\n    const wacAllowHeader = response.headers.get(\"WAC-Allow\");\r\n    if (wacAllowHeader) {\r\n        resourceInfo.permissions = parseWacAllowHeader(wacAllowHeader);\r\n    }\r\n    return resourceInfo;\r\n}\r\n/**\r\n * Parse a WAC-Allow header into user and public access booleans.\r\n *\r\n * @param wacAllowHeader A WAC-Allow header in the format `user=\"read append write control\",public=\"read\"`\r\n * @see https://github.com/solid/solid-spec/blob/cb1373a369398d561b909009bd0e5a8c3fec953b/api-rest.md#wac-allow-headers\r\n */\r\nfunction parseWacAllowHeader(wacAllowHeader) {\r\n    function parsePermissionStatement(permissionStatement) {\r\n        const permissions = permissionStatement.split(\" \");\r\n        const writePermission = permissions.includes(\"write\");\r\n        return writePermission\r\n            ? {\r\n                read: permissions.includes(\"read\"),\r\n                append: true,\r\n                write: true,\r\n                control: permissions.includes(\"control\"),\r\n            }\r\n            : {\r\n                read: permissions.includes(\"read\"),\r\n                append: permissions.includes(\"append\"),\r\n                write: false,\r\n                control: permissions.includes(\"control\"),\r\n            };\r\n    }\r\n    function getStatementFor(header, scope) {\r\n        const relevantEntries = header\r\n            .split(\",\")\r\n            .map((rawEntry) => rawEntry.split(\"=\"))\r\n            .filter((parts) => parts.length === 2 && parts[0].trim() === scope);\r\n        // There should only be one statement with the given scope:\r\n        if (relevantEntries.length !== 1) {\r\n            return \"\";\r\n        }\r\n        const relevantStatement = relevantEntries[0][1].trim();\r\n        // The given statement should be wrapped in double quotes to be valid:\r\n        if (relevantStatement.charAt(0) !== '\"' ||\r\n            relevantStatement.charAt(relevantStatement.length - 1) !== '\"') {\r\n            return \"\";\r\n        }\r\n        // Return the statment without the wrapping quotes, e.g.: read append write control\r\n        return relevantStatement.substring(1, relevantStatement.length - 1);\r\n    }\r\n    return {\r\n        user: parsePermissionStatement(getStatementFor(wacAllowHeader, \"user\")),\r\n        public: parsePermissionStatement(getStatementFor(wacAllowHeader, \"public\")),\r\n    };\r\n}\r\n/** @hidden Used to instantiate a separate instance from input parameters */\r\nfunction internal_cloneResource(resource) {\r\n    let clonedResource;\r\n    if (typeof resource.slice === \"function\") {\r\n        // If given Resource is a File:\r\n        clonedResource = resource.slice();\r\n    }\r\n    else if (typeof resource.match === \"function\") {\r\n        // If given Resource is a SolidDataset:\r\n        // (We use the existince of a `match` method as a heuristic:)\r\n        clonedResource = clone(resource);\r\n    }\r\n    else {\r\n        // If it is just a plain object containing metadata:\r\n        clonedResource = Object.assign({}, resource);\r\n    }\r\n    return Object.assign(clonedResource, \r\n    // Although the RDF/JS data structures use classes and mutation,\r\n    // we only attach atomic properties that we never mutate.\r\n    // Hence, `copyNonClassProperties` is a heuristic that allows us to only clone our own data\r\n    // structures, rather than references to the same mutable instances of RDF/JS data structures:\r\n    copyNonClassProperties(resource));\r\n}\r\nfunction copyNonClassProperties(source) {\r\n    const copy = {};\r\n    Object.keys(source).forEach((key) => {\r\n        const value = source[key];\r\n        if (typeof value !== \"object\" || value === null) {\r\n            copy[key] = value;\r\n            return;\r\n        }\r\n        if (value.constructor.name !== \"Object\") {\r\n            return;\r\n        }\r\n        copy[key] = value;\r\n    });\r\n    return copy;\r\n}\r\n/** @internal */\r\nfunction internal_isUnsuccessfulResponse(response) {\r\n    return !response.ok;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/** @ignore For internal use only. */\r\nconst internal_defaultFetchOptions = {\r\n    fetch: fetch,\r\n};\r\n/**\r\n * Retrieve the information about a resource (e.g. access permissions) without\r\n * fetching the resource itself.\r\n *\r\n * @param url URL to fetch Resource metadata from.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters).\r\n * @returns Promise resolving to the metadata describing the given Resource, or rejecting if fetching it failed.\r\n * @since 0.4.0\r\n */\r\nasync function getResourceInfo(url, options = internal_defaultFetchOptions) {\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const response = await config.fetch(url, { method: \"HEAD\" });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Fetching the metadata of the Resource at \\`${url}\\` failed: \\`${response.status}\\` \\`${response.statusText}\\`.`, response);\r\n    }\r\n    const resourceInfo = internal_parseResourceInfo(response);\r\n    return { internal_resourceInfo: resourceInfo };\r\n}\r\n/**\r\n * @param resource Resource for which to check whether it is a Container.\r\n * @returns Whether `resource` is a Container.\r\n */\r\nfunction isContainer(resource) {\r\n    const containerUrl = hasResourceInfo(resource)\r\n        ? getSourceUrl(resource)\r\n        : internal_toIriString(resource);\r\n    return containerUrl.endsWith(\"/\");\r\n}\r\n/**\r\n * This function will tell you whether a given Resource contains raw data, or a SolidDataset.\r\n *\r\n * @param resource Resource for which to check whether it contains raw data.\r\n * @return Whether `resource` contains raw data.\r\n */\r\nfunction isRawData(resource) {\r\n    return resource.internal_resourceInfo.isRawData;\r\n}\r\n/**\r\n * @param resource Resource for which to determine the Content Type.\r\n * @returns The Content Type, if known, or null if not known.\r\n */\r\nfunction getContentType(resource) {\r\n    var _a;\r\n    return (_a = resource.internal_resourceInfo.contentType) !== null && _a !== void 0 ? _a : null;\r\n}\r\nfunction getSourceUrl(resource) {\r\n    if (hasResourceInfo(resource)) {\r\n        return resource.internal_resourceInfo.sourceIri;\r\n    }\r\n    return null;\r\n}\r\n/** @hidden Alias of getSourceUrl for those who prefer to use IRI terminology. */\r\nconst getSourceIri = getSourceUrl;\r\n/**\r\n * Given a Resource that exposes information about the owner of the Pod it is in, returns the WebID of that owner.\r\n *\r\n * Data about the owner of the Pod is exposed when the following conditions hold:\r\n * - The Pod server supports exposing the Pod owner\r\n * - The current user is allowed to see who the Pod owner is.\r\n *\r\n * If one or more of those conditions are false, this function will return `null`.\r\n *\r\n * @param resource A Resource that contains information about the owner of the Pod it is in.\r\n * @returns The WebID of the owner of the Pod the Resource is in, if provided, or `null` if not.\r\n * @since 0.6.0\r\n */\r\nfunction getPodOwner(resource) {\r\n    var _a;\r\n    if (!hasServerResourceInfo(resource)) {\r\n        return null;\r\n    }\r\n    const podOwners = (_a = resource.internal_resourceInfo.linkedResources[\"http://www.w3.org/ns/solid/terms#podOwner\"]) !== null && _a !== void 0 ? _a : [];\r\n    return podOwners.length === 1 ? podOwners[0] : null;\r\n}\r\n/**\r\n * Given a WebID and a Resource that exposes information about the owner of the Pod it is in, returns whether the given WebID is the owner of the Pod.\r\n *\r\n * Data about the owner of the Pod is exposed when the following conditions hold:\r\n * - The Pod server supports exposing the Pod owner\r\n * - The current user is allowed to see who the Pod owner is.\r\n *\r\n * If one or more of those conditions are false, this function will return `null`.\r\n *\r\n * @param webId The WebID of which to check whether it is the Pod Owner's.\r\n * @param resource A Resource that contains information about the owner of the Pod it is in.\r\n * @returns Whether the given WebID is the Pod Owner's, if the Pod Owner is exposed, or `null` if it is not exposed.\r\n * @since 0.6.0\r\n */\r\nfunction isPodOwner(webId, resource) {\r\n    const podOwner = getPodOwner(resource);\r\n    if (typeof podOwner !== \"string\") {\r\n        return null;\r\n    }\r\n    return podOwner === webId;\r\n}\r\n/**\r\n * Extends the regular JavaScript error object with access to the status code and status message.\r\n * @since 1.2.0\r\n */\r\nclass FetchError extends SolidClientError {\r\n    constructor(message, errorResponse) {\r\n        super(message);\r\n        this.statusCode = errorResponse.status;\r\n        this.statusText = errorResponse.statusText;\r\n    }\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nconst defaultGetFileOptions = {\r\n    fetch: fetch,\r\n};\r\nconst RESERVED_HEADERS = [\"Slug\", \"If-None-Match\", \"Content-Type\"];\r\n/**\r\n * Some of the headers must be set by the library, rather than directly.\r\n */\r\nfunction containsReserved(header) {\r\n    return RESERVED_HEADERS.some((reserved) => header[reserved] !== undefined);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Retrieves a file from a URL and returns the file as a blob.\r\n *\r\n * @param url The URL of the file to return\r\n * @param options Fetching options: a custom fetcher and/or headers.\r\n * @returns The file as a blob.\r\n */\r\nasync function getFile(input, options = defaultGetFileOptions) {\r\n    const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\r\n    const url = internal_toIriString(input);\r\n    const response = await config.fetch(url, config.init);\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Fetching the File failed: \\`${response.status}\\` \\`${response.statusText}\\`.`, response);\r\n    }\r\n    const resourceInfo = internal_parseResourceInfo(response);\r\n    const data = await response.blob();\r\n    const fileWithResourceInfo = Object.assign(data, {\r\n        internal_resourceInfo: resourceInfo,\r\n    });\r\n    return fileWithResourceInfo;\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Deletes a file at a given URL.\r\n *\r\n * @param file The URL of the file to delete\r\n */\r\nasync function deleteFile(file, options = defaultGetFileOptions) {\r\n    const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\r\n    const url = hasResourceInfo(file)\r\n        ? internal_toIriString(getSourceIri(file))\r\n        : internal_toIriString(file);\r\n    const response = await config.fetch(url, Object.assign(Object.assign({}, config.init), { method: \"DELETE\" }));\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Deleting the file at \\`${url}\\` failed: \\`${response.status}\\` \\`${response.statusText}\\`.`, response);\r\n    }\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Saves a file in a folder associated with the given URL. The final filename may or may\r\n * not be the given `slug`.\r\n *\r\n * The Container at the given URL should already exist; if it does not, the returned Promise will\r\n * be rejected. You can initialise it first using [[createContainerAt]], or directly save the file\r\n * at the desired location using [[overwriteFile]].\r\n *\r\n * @param folderUrl The URL of the folder where the new file is saved.\r\n * @param file The file to be written.\r\n * @param options Additional parameters for file creation (e.g. a slug).\r\n * @returns A Promise that resolves to the saved file, if available, or `null` if the current user does not have Read access to the newly-saved file. It rejects if saving fails.\r\n */\r\nasync function saveFileInContainer(folderUrl, file, options = defaultGetFileOptions) {\r\n    const folderUrlString = internal_toIriString(folderUrl);\r\n    const response = await writeFile(folderUrlString, file, \"POST\", options);\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Saving the file in \\`${folderUrl}\\` failed: \\`${response.status}\\` \\`${response.statusText}\\`.`, response);\r\n    }\r\n    const locationHeader = response.headers.get(\"Location\");\r\n    if (locationHeader === null) {\r\n        throw new Error(\"Could not determine the location of the newly saved file.\");\r\n    }\r\n    const fileIri = new URL(locationHeader, new URL(folderUrlString).origin).href;\r\n    const blobClone = internal_cloneResource(file);\r\n    const resourceInfo = {\r\n        internal_resourceInfo: {\r\n            isRawData: true,\r\n            sourceIri: fileIri,\r\n            contentType: file.type.length > 0 ? file.type : undefined,\r\n        },\r\n    };\r\n    return Object.assign(blobClone, resourceInfo);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Saves a file at a given URL, replacing any previous content.\r\n *\r\n * The Solid server will create any intermediary Containers that do not exist yet, so they do not\r\n * need to be created in advance. For example, if the target URL is\r\n * https://example.pod/container/resource and https://example.pod/container/ does not exist yet,\r\n * it will exist after this function resolves successfully.\r\n *\r\n * @param fileUrl The URL where the file is saved.\r\n * @param file The file to be written.\r\n * @param options Additional parameters for file creation (e.g. a slug).\r\n */\r\nasync function overwriteFile(fileUrl, file, options = defaultGetFileOptions) {\r\n    const fileUrlString = internal_toIriString(fileUrl);\r\n    const response = await writeFile(fileUrlString, file, \"PUT\", options);\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Overwriting the file at \\`${fileUrlString}\\` failed: \\`${response.status}\\` \\`${response.statusText}\\`.`, response);\r\n    }\r\n    const blobClone = internal_cloneResource(file);\r\n    const resourceInfo = internal_parseResourceInfo(response);\r\n    resourceInfo.sourceIri = fileUrlString;\r\n    resourceInfo.isRawData = true;\r\n    return Object.assign(blobClone, { internal_resourceInfo: resourceInfo });\r\n}\r\nfunction isHeadersArray(headers) {\r\n    return Array.isArray(headers);\r\n}\r\n/**\r\n * The return type of this function is misleading: it should ONLY be used to check\r\n * whether an object has a forEach method that returns <key, value> pairs.\r\n *\r\n * @param headers A headers object that might have a forEach\r\n */\r\nfunction hasHeadersObjectForEach(headers) {\r\n    return typeof headers.forEach === \"function\";\r\n}\r\n/**\r\n * @hidden\r\n * This function feels unnecessarily complicated, but is required in order to\r\n * have Headers according to type definitions in both Node and browser environments.\r\n * This might require a fix upstream to be cleaned up.\r\n *\r\n * @param headersToFlatten A structure containing headers potentially in several formats\r\n */\r\nfunction flattenHeaders(headersToFlatten) {\r\n    if (typeof headersToFlatten === \"undefined\") {\r\n        return {};\r\n    }\r\n    let flatHeaders = {};\r\n    if (isHeadersArray(headersToFlatten)) {\r\n        headersToFlatten.forEach(([key, value]) => {\r\n            flatHeaders[key] = value;\r\n        });\r\n        // Note that the following line must be a elsif, because string[][] has a forEach,\r\n        // but it returns string[] instead of <key, value>\r\n    }\r\n    else if (hasHeadersObjectForEach(headersToFlatten)) {\r\n        headersToFlatten.forEach((value, key) => {\r\n            flatHeaders[key] = value;\r\n        });\r\n    }\r\n    else {\r\n        // If the headers are already a Record<string, string>,\r\n        // they can directly be returned.\r\n        flatHeaders = headersToFlatten;\r\n    }\r\n    return flatHeaders;\r\n}\r\n/**\r\n * Internal function that performs the actual write HTTP query, either POST\r\n * or PUT depending on the use case.\r\n *\r\n * @param fileUrl The URL where the file is saved\r\n * @param file The file to be written\r\n * @param method The HTTP method\r\n * @param options Additional parameters for file creation (e.g. a slug)\r\n */\r\nasync function writeFile(targetUrl, file, method, options) {\r\n    var _a, _b;\r\n    const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\r\n    const headers = flattenHeaders((_b = (_a = config.init) === null || _a === void 0 ? void 0 : _a.headers) !== null && _b !== void 0 ? _b : {});\r\n    if (containsReserved(headers)) {\r\n        throw new Error(`No reserved header (${RESERVED_HEADERS.join(\", \")}) should be set in the optional RequestInit.`);\r\n    }\r\n    // If a slug is in the parameters, set the request headers accordingly\r\n    if (config.slug !== undefined) {\r\n        headers[\"Slug\"] = config.slug;\r\n    }\r\n    headers[\"Content-Type\"] = file.type;\r\n    const targetUrlString = internal_toIriString(targetUrl);\r\n    return await config.fetch(targetUrlString, Object.assign(Object.assign({}, config.init), { headers,\r\n        method, body: file }));\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * @param quads Triples that should be serialised to Turtle\r\n * @internal Utility method for internal use; not part of the public API.\r\n */\r\nasync function triplesToTurtle(quads) {\r\n    const n3 = await loadN3();\r\n    const format = \"text/turtle\";\r\n    const writer = new n3.Writer({ format: format });\r\n    // Remove any potentially lingering references to Named Graphs in Quads;\r\n    // they'll be determined by the URL the Turtle will be sent to:\r\n    const triples = quads.map((quad) => DataFactory.quad(quad.subject, quad.predicate, quad.object, undefined));\r\n    writer.addQuads(triples);\r\n    const writePromise = new Promise((resolve, reject) => {\r\n        writer.end((error, result) => {\r\n            /* istanbul ignore if [n3.js doesn't actually pass an error nor a result, apparently: https://github.com/rdfjs/N3.js/blob/62682e48c02d8965b4d728cb5f2cbec6b5d1b1b8/src/N3Writer.js#L290] */\r\n            if (error) {\r\n                return reject(error);\r\n            }\r\n            resolve(result);\r\n        });\r\n    });\r\n    const rawTurtle = await writePromise;\r\n    return rawTurtle;\r\n}\r\n/**\r\n * @param raw Turtle that should be parsed into Triples\r\n * @internal Utility method for internal use; not part of the public API.\r\n */\r\nasync function turtleToTriples(raw, resourceIri) {\r\n    const format = \"text/turtle\";\r\n    const n3 = await loadN3();\r\n    const parser = new n3.Parser({ format: format, baseIRI: resourceIri });\r\n    const parsingPromise = new Promise((resolve, reject) => {\r\n        const parsedTriples = [];\r\n        parser.parse(raw, (error, triple, _prefixes) => {\r\n            if (error) {\r\n                return reject(error);\r\n            }\r\n            if (triple) {\r\n                parsedTriples.push(triple);\r\n            }\r\n            else {\r\n                resolve(parsedTriples);\r\n            }\r\n        });\r\n    });\r\n    return parsingPromise;\r\n}\r\nasync function loadN3() {\r\n    // When loaded via Webpack or another bundler that looks at the `modules` field in package.json,\r\n    // N3 serves up ES modules with named exports.\r\n    // However, when it is loaded in Node, it serves up a CommonJS module, which, when imported from\r\n    // a Node ES module, is in the shape of a default export that is an object with all the named\r\n    // exports as its properties.\r\n    // This means that if we were to import the default module, our code would fail in Webpack,\r\n    // whereas if we imported the named exports, our code would fail in Node.\r\n    // As a workaround, we use a dynamic import. This way, we can use the same syntax in every\r\n    // environment, where the differences between the environments are in whether the returned object\r\n    // includes a `default` property that contains all exported functions, or whether those functions\r\n    // are available on the returned object directly. We can then respond to those different\r\n    // situations at runtime.\r\n    // Unfortunately, that does mean that tree shaking will not work until N3 also provides ES modules\r\n    // for Node, or adds a default export for Webpack. See\r\n    // https://github.com/rdfjs/N3.js/issues/196\r\n    const n3Module = await import('n3');\r\n    /* istanbul ignore if: the package provides named exports in the unit test environment */\r\n    if (typeof n3Module.default !== \"undefined\") {\r\n        return n3Module.default;\r\n    }\r\n    return n3Module;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * IRIs of the XML Schema data types we support\r\n * @internal\r\n */\r\nconst xmlSchemaTypes = {\r\n    boolean: \"http://www.w3.org/2001/XMLSchema#boolean\",\r\n    dateTime: \"http://www.w3.org/2001/XMLSchema#dateTime\",\r\n    decimal: \"http://www.w3.org/2001/XMLSchema#decimal\",\r\n    integer: \"http://www.w3.org/2001/XMLSchema#integer\",\r\n    string: \"http://www.w3.org/2001/XMLSchema#string\",\r\n    langString: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\",\r\n};\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n * @see https://www.w3.org/TR/xmlschema-2/#boolean-lexical-representation\r\n */\r\nfunction serializeBoolean(value) {\r\n    return value ? \"true\" : \"false\";\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized boolean, or null if the given value is not a valid serialised boolean.\r\n * @see https://www.w3.org/TR/xmlschema-2/#boolean-lexical-representation\r\n */\r\nfunction deserializeBoolean(value) {\r\n    if (value === \"true\" || value === \"1\") {\r\n        return true;\r\n    }\r\n    else if (value === \"false\" || value === \"0\") {\r\n        return false;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n * @see https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation\r\n */\r\nfunction serializeDatetime(value) {\r\n    // Although the XML Schema DateTime is not _exactly_ an ISO 8601 string\r\n    // (see https://www.w3.org/TR/xmlschema-2/#deviantformats),\r\n    // the deviations only affect the parsing, not the serialisation.\r\n    // Therefore, we can just use .toISOString():\r\n    return value.toISOString();\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized datetime, or null if the given value is not a valid serialised datetime.\r\n * @see https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation\r\n */\r\nfunction deserializeDatetime(literalString) {\r\n    // DateTime in the format described at\r\n    // https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation\r\n    // (without constraints on the value).\r\n    // -? - An optional leading `-`.\r\n    // \\d{4,}- - Four or more digits followed by a `-` representing the year. Example: \"3000-\".\r\n    // \\d\\d-\\d\\d - Two digits representing the month and two representing the day of the month,\r\n    //             separated by a `-`. Example: \"11-03\".\r\n    // T - The letter T, separating the date from the time.\r\n    // \\d\\d:\\d\\d:\\d\\d - Two digits for the hour, minute and second, respectively, separated by a `:`.\r\n    //                  Example: \"13:37:42\".\r\n    // (\\.\\d+)? - Optionally a `.` followed by one or more digits representing milliseconds.\r\n    //            Example: \".1337\".\r\n    // (Z|(\\+|-)\\d\\d:\\d\\d) - The letter Z indicating UTC, or a `+` or `-` followed by two digits for\r\n    //                       the hour offset and two for the minute offset, separated by a `:`.\r\n    //                       Example: \"+13:37\".\r\n    const datetimeRegEx = /-?\\d{4,}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(Z|(\\+|-)\\d\\d:\\d\\d)/;\r\n    if (!datetimeRegEx.test(literalString)) {\r\n        return null;\r\n    }\r\n    const [signedDateString, rest] = literalString.split(\"T\");\r\n    // The date string can optionally be prefixed with `-`,\r\n    // in which case the year is negative:\r\n    const [yearMultiplier, dateString] = signedDateString.charAt(0) === \"-\"\r\n        ? [-1, signedDateString.substring(1)]\r\n        : [1, signedDateString];\r\n    const [yearString, monthString, dayString] = dateString.split(\"-\");\r\n    const utcFullYear = Number.parseInt(yearString, 10) * yearMultiplier;\r\n    const utcMonth = Number.parseInt(monthString, 10) - 1;\r\n    const utcDate = Number.parseInt(dayString, 10);\r\n    const [timeString, timezoneString] = splitTimeFromTimezone(rest);\r\n    const [hourOffset, minuteOffset] = getTimezoneOffsets(timezoneString);\r\n    const [hourString, minuteString, timeRest] = timeString.split(\":\");\r\n    const utcHours = Number.parseInt(hourString, 10) + hourOffset;\r\n    const utcMinutes = Number.parseInt(minuteString, 10) + minuteOffset;\r\n    const [secondString, optionalMillisecondString] = timeRest.split(\".\");\r\n    const utcSeconds = Number.parseInt(secondString, 10);\r\n    const utcMilliseconds = optionalMillisecondString\r\n        ? Number.parseInt(optionalMillisecondString, 10)\r\n        : 0;\r\n    const date = new Date(Date.UTC(utcFullYear, utcMonth, utcDate, utcHours, utcMinutes, utcSeconds, utcMilliseconds));\r\n    // For the year, values from 0 to 99 map to the years 1900 to 1999. Since the serialisation\r\n    // always writes out the years fully, we should correct this to actually map to the years 0 to 99.\r\n    // See\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#Individual_date_and_time_component_values\r\n    if (utcFullYear >= 0 && utcFullYear < 100) {\r\n        // Note that we base it on the calculated year, rather than the year that was actually read.\r\n        // This is because the year might actually differ from the value listed in the serialisation,\r\n        // i.e. when moving the timezone offset to UTC pushes it into a different year:\r\n        date.setUTCFullYear(date.getUTCFullYear() - 1900);\r\n    }\r\n    return date;\r\n}\r\n/**\r\n * @param timeString An XML Schema time string.\r\n * @returns A tuple [timeString, timezoneString].\r\n * @see https://www.w3.org/TR/xmlschema-2/#time-lexical-repr\r\n */\r\nfunction splitTimeFromTimezone(timeString) {\r\n    if (timeString.endsWith(\"Z\")) {\r\n        return [timeString.substring(0, timeString.length - 1), \"Z\"];\r\n    }\r\n    const splitOnPlus = timeString.split(\"+\");\r\n    const splitOnMinus = timeString.split(\"-\");\r\n    return splitOnPlus.length > splitOnMinus.length\r\n        ? [splitOnPlus[0], \"+\" + splitOnPlus[1]]\r\n        : [splitOnMinus[0], \"-\" + splitOnMinus[1]];\r\n}\r\n/**\r\n * @param timezoneString Lexical representation of a time zone in XML Schema.\r\n * @returns A tuple of the hour and minute offset of the time zone.\r\n * @see https://www.w3.org/TR/xmlschema-2/#dateTime-timezones\r\n */\r\nfunction getTimezoneOffsets(timezoneString) {\r\n    if (timezoneString === \"Z\") {\r\n        return [0, 0];\r\n    }\r\n    const multiplier = timezoneString.charAt(0) === \"+\" ? 1 : -1;\r\n    const [hourString, minuteString] = timezoneString.substring(1).split(\":\");\r\n    const hours = Number.parseInt(hourString, 10);\r\n    const minutes = Number.parseInt(minuteString, 10);\r\n    return [hours * multiplier, minutes * multiplier];\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n * @see https://www.w3.org/TR/xmlschema-2/#decimal-lexical-representation\r\n */\r\nfunction serializeDecimal(value) {\r\n    return value.toString();\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized decimal, or null if the given value is not a valid serialised decimal.\r\n * @see https://www.w3.org/TR/xmlschema-2/#decimal-lexical-representation\r\n */\r\nfunction deserializeDecimal(literalString) {\r\n    const deserialized = Number.parseFloat(literalString);\r\n    if (Number.isNaN(deserialized)) {\r\n        return null;\r\n    }\r\n    return deserialized;\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n */\r\nfunction serializeInteger(value) {\r\n    return value.toString();\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized integer, or null if the given value is not a valid serialised integer.\r\n */\r\nfunction deserializeInteger(literalString) {\r\n    const deserialized = Number.parseInt(literalString, 10);\r\n    if (Number.isNaN(deserialized)) {\r\n        return null;\r\n    }\r\n    return deserialized;\r\n}\r\n/**\r\n * @internal\r\n * @param locale Locale to transform into a consistent format.\r\n */\r\nfunction normalizeLocale(locale) {\r\n    return locale.toLowerCase();\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to raw NamedNodes.\r\n * @param value The value that might or might not be a Named Node.\r\n * @returns Whether `value` is a Named Node.\r\n */\r\nfunction isNamedNode(value) {\r\n    return isTerm(value) && value.termType === \"NamedNode\";\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to raw Literals.\r\n * @param value The value that might or might not be a Literal.\r\n * @returns Whether `value` is a Literal.\r\n */\r\nfunction isLiteral(value) {\r\n    return isTerm(value) && value.termType === \"Literal\";\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to raw Terms.\r\n * @param value The value that might or might not be a Term.\r\n * @returns Whether `value` is a Term.\r\n */\r\nfunction isTerm(value) {\r\n    return (value !== null &&\r\n        typeof value === \"object\" &&\r\n        typeof value.termType === \"string\" &&\r\n        typeof value.value === \"string\" &&\r\n        typeof value.equals === \"function\");\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to LocalNodes.\r\n * @param value The value that might or might not be a Node with no known IRI yet.\r\n * @returns Whether `value` is a Node with no known IRI yet.\r\n */\r\nfunction isLocalNode(value) {\r\n    return (isTerm(value) &&\r\n        value.termType === \"BlankNode\" &&\r\n        typeof value.internal_name === \"string\");\r\n}\r\n/**\r\n * Construct a new LocalNode.\r\n *\r\n * @internal Library users shouldn't need to be exposed to LocalNodes.\r\n * @param name Name to identify this node by.\r\n * @returns A LocalNode whose name will be resolved when it is persisted to a Pod.\r\n */\r\nfunction getLocalNode(name) {\r\n    const localNode = Object.assign(DataFactory.blankNode(), {\r\n        internal_name: name,\r\n    });\r\n    return localNode;\r\n}\r\n/**\r\n * Ensure that a given value is a valid URL.\r\n *\r\n * @internal Library users shouldn't need to be exposed to raw URLs.\r\n * @param iri The value of which to verify that it is a valid URL.\r\n */\r\nfunction internal_isValidUrl(iri) {\r\n    const iriString = internal_toIriString(iri);\r\n    // If the runtime environment supports URL, instantiate one.\r\n    // If the given IRI is not a valid URL, it will throw an error.\r\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/URL\r\n    /* istanbul ignore if [URL is available in our testing environment, so we cannot test the alternative] */\r\n    if (typeof URL !== \"function\") {\r\n        // If we can't validate the URL, do not throw an error:\r\n        return true;\r\n    }\r\n    try {\r\n        new URL(iriString);\r\n    }\r\n    catch (_a) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Ensure that a given value is a Named Node.\r\n *\r\n * If the given parameter is a Named Node already, it will be returned as-is. If it is a string, it\r\n * will check whether it is a valid IRI. If not, it will throw an error; otherwise a Named Node\r\n * representing the given IRI will be returned.\r\n *\r\n * @internal Library users shouldn't need to be exposed to raw NamedNodes.\r\n * @param iri The IRI that should be converted into a Named Node, if it isn't one yet.\r\n */\r\nfunction asNamedNode(iri) {\r\n    if (!internal_isValidUrl(iri)) {\r\n        throw new ValidUrlExpectedError(iri);\r\n    }\r\n    if (isNamedNode(iri)) {\r\n        return iri;\r\n    }\r\n    return DataFactory.namedNode(iri);\r\n}\r\n/**\r\n * Check whether two current- or potential NamedNodes are/will be equal.\r\n *\r\n * @internal Utility method; library users should not need to interact with LocalNodes directly.\r\n */\r\nfunction isEqual(node1, node2, options = {}) {\r\n    if (isNamedNode(node1) && isNamedNode(node2)) {\r\n        return node1.equals(node2);\r\n    }\r\n    if (isLocalNode(node1) && isLocalNode(node2)) {\r\n        return node1.internal_name === node2.internal_name;\r\n    }\r\n    if (typeof options.resourceIri === \"undefined\") {\r\n        // If we don't know what IRI to resolve the LocalNode to,\r\n        // we cannot conclude that it is equal to the NamedNode's full IRI:\r\n        return false;\r\n    }\r\n    const namedNode1 = isNamedNode(node1)\r\n        ? node1\r\n        : resolveIriForLocalNode(node1, options.resourceIri);\r\n    const namedNode2 = isNamedNode(node2)\r\n        ? node2\r\n        : resolveIriForLocalNode(node2, options.resourceIri);\r\n    return namedNode1.equals(namedNode2);\r\n}\r\n/**\r\n * @internal Utility method; library users should not need to interact with LocalNodes directly.\r\n * @param quad The Quad to resolve LocalNodes in.\r\n * @param resourceIri The IRI of the Resource to resolve the LocalNodes against.\r\n */\r\nfunction resolveIriForLocalNodes(quad, resourceIri) {\r\n    const subject = isLocalNode(quad.subject)\r\n        ? resolveIriForLocalNode(quad.subject, resourceIri)\r\n        : quad.subject;\r\n    const object = isLocalNode(quad.object)\r\n        ? resolveIriForLocalNode(quad.object, resourceIri)\r\n        : quad.object;\r\n    return Object.assign(Object.assign({}, quad), { subject: subject, object: object });\r\n}\r\n/**\r\n * @internal Utility method; library users should not need to interact with LocalNodes directly.\r\n * @param localNode The LocalNode to resolve to a NamedNode.\r\n * @param resourceIri The Resource in which the Node will be saved.\r\n */\r\nfunction resolveIriForLocalNode(localNode, resourceIri) {\r\n    return DataFactory.namedNode(resolveLocalIri(localNode.internal_name, resourceIri));\r\n}\r\n/**\r\n * @internal API for internal use only.\r\n * @param name The name identifying a Thing.\r\n * @param resourceIri The Resource in which the Thing can be found.\r\n */\r\nfunction resolveLocalIri(name, resourceIri) {\r\n    /* istanbul ignore if [The URL interface is available in the testing environment, so we cannot test this] */\r\n    if (typeof URL !== \"function\") {\r\n        throw new Error(\"The URL interface is not available, so an IRI cannot be determined.\");\r\n    }\r\n    const thingIri = new URL(resourceIri);\r\n    thingIri.hash = name;\r\n    return thingIri.href;\r\n}\r\n/**\r\n * This error is thrown when a given value is not a proper URL.\r\n */\r\nclass ValidUrlExpectedError extends SolidClientError {\r\n    constructor(receivedValue) {\r\n        const value = isNamedNode(receivedValue)\r\n            ? receivedValue.value\r\n            : receivedValue;\r\n        const message = `Expected a valid URL, but received: \\`${value}\\`.`;\r\n        super(message);\r\n        this.receivedValue = value;\r\n    }\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Verify whether a given value has the required DatasetCore properties.\r\n *\r\n * @param input Value that might or might not be a DatasetCore\r\n * @returns Whether `input` provides the properties prescribed by the RDF/JS Dataset spec 1.0.\r\n * @hidden This is an internal convenience function.\r\n */\r\nfunction internal_isDatasetCore(input) {\r\n    return (typeof input === \"object\" &&\r\n        input !== null &&\r\n        typeof input.size === \"number\" &&\r\n        typeof input.add === \"function\" &&\r\n        typeof input.delete === \"function\" &&\r\n        typeof input.has === \"function\" &&\r\n        typeof input.match === \"function\" &&\r\n        Array.from(input).length === input.size);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/** @hidden For internal use only. */\r\nfunction internal_getReadableValue(value) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h;\r\n    if (isNamedNode(value)) {\r\n        return `<${value.value}> (URL)`;\r\n    }\r\n    if (isLiteral(value)) {\r\n        if (!isNamedNode(value.datatype)) {\r\n            return `[${value.value}] (RDF/JS Literal of unknown type)`;\r\n        }\r\n        let val;\r\n        switch (value.datatype.value) {\r\n            case xmlSchemaTypes.boolean:\r\n                val = (_b = (_a = deserializeBoolean(value.value)) === null || _a === void 0 ? void 0 : _a.valueOf()) !== null && _b !== void 0 ? _b : `Invalid data: \\`${value.value}\\``;\r\n                return val + \" (boolean)\";\r\n            case xmlSchemaTypes.dateTime:\r\n                val = (_d = (_c = deserializeDatetime(value.value)) === null || _c === void 0 ? void 0 : _c.toUTCString()) !== null && _d !== void 0 ? _d : `Invalid data: \\`${value.value}\\``;\r\n                return val + \" (datetime)\";\r\n            case xmlSchemaTypes.decimal:\r\n                val = (_f = (_e = deserializeDecimal(value.value)) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : `Invalid data: \\`${value.value}\\``;\r\n                return val + \" (decimal)\";\r\n            case xmlSchemaTypes.integer:\r\n                val = (_h = (_g = deserializeInteger(value.value)) === null || _g === void 0 ? void 0 : _g.toString()) !== null && _h !== void 0 ? _h : `Invalid data: \\`${value.value}\\``;\r\n                return val + \" (integer)\";\r\n            case xmlSchemaTypes.langString:\r\n                return `\"${value.value}\" (${value.language} string)`;\r\n            case xmlSchemaTypes.string:\r\n                return `\"${value.value}\" (string)`;\r\n            default:\r\n                return `[${value.value}] (RDF/JS Literal of type: \\`${value.datatype.value}\\`)`;\r\n        }\r\n    }\r\n    if (isLocalNode(value)) {\r\n        return `<#${value.internal_name}> (URL)`;\r\n    }\r\n    if (value.termType === \"BlankNode\") {\r\n        return `[${value.value}] (RDF/JS BlankNode)`;\r\n    }\r\n    if (value.termType === \"Quad\") {\r\n        return `??? (nested RDF* Quad)`;\r\n    }\r\n    /* istanbul ignore else: The if statements are exhaustive; if not, TypeScript will complain. */\r\n    if (value.termType === \"Variable\") {\r\n        return `?${value.value} (RDF/JS Variable)`;\r\n    }\r\n    /* istanbul ignore next: The if statements are exhaustive; if not, TypeScript will complain. */\r\n    return value;\r\n}\r\n/** @hidden */\r\nfunction internal_toNode(thing) {\r\n    if (isNamedNode(thing) || isLocalNode(thing)) {\r\n        return thing;\r\n    }\r\n    if (typeof thing === \"string\") {\r\n        return asNamedNode(thing);\r\n    }\r\n    if (isThingLocal(thing)) {\r\n        return thing.internal_localSubject;\r\n    }\r\n    return asNamedNode(asUrl(thing));\r\n}\r\n/**\r\n * @internal\r\n * @param thing Thing to clone.\r\n * @returns A new Thing with the same Quads as `input`.\r\n */\r\nfunction internal_cloneThing(thing) {\r\n    const cloned = clone(thing);\r\n    if (isThingLocal(thing)) {\r\n        cloned.internal_localSubject = thing.internal_localSubject;\r\n        return cloned;\r\n    }\r\n    cloned.internal_url = thing.internal_url;\r\n    return cloned;\r\n}\r\n/**\r\n * @internal\r\n * @param thing Thing to clone.\r\n * @param callback Function that takes a Quad, and returns a boolean indicating whether that Quad should be included in the cloned Dataset.\r\n * @returns A new Thing with the same Quads as `input`, excluding the ones for which `callback` returned `false`.\r\n */\r\nfunction internal_filterThing(thing, callback) {\r\n    const filtered = filter(thing, callback);\r\n    if (isThingLocal(thing)) {\r\n        filtered.internal_localSubject =\r\n            thing.internal_localSubject;\r\n        return filtered;\r\n    }\r\n    filtered.internal_url = thing.internal_url;\r\n    return filtered;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nfunction internal_throwIfNotThing(thing) {\r\n    if (!isThing(thing)) {\r\n        throw new ThingExpectedError(thing);\r\n    }\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * @param thing The [[Thing]] to read a URL value from.\r\n * @param property The given Property for which you want the URL value.\r\n * @returns A URL value for the given Property, if present, or null otherwise.\r\n */\r\nfunction getUrl(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const namedNodeMatcher = getNamedNodeMatcher(property);\r\n    const matchingQuad = findOne(thing, namedNodeMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object.value;\r\n}\r\n/** @hidden Alias of [[getUrl]] for those who prefer IRI terminology. */\r\nconst getIri = getUrl;\r\n/**\r\n * @param thing The [[Thing]] to read the URL values from.\r\n * @param property The given Property for which you want the URL values.\r\n * @returns The URL values for the given Property.\r\n */\r\nfunction getUrlAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const iriMatcher = getNamedNodeMatcher(property);\r\n    const matchingQuads = findAll(thing, iriMatcher);\r\n    return matchingQuads.map((quad) => quad.object.value);\r\n}\r\n/** @hidden Alias of [[getUrlAll]] for those who prefer IRI terminology. */\r\nconst getIriAll = getUrlAll;\r\n/**\r\n * @param thing The [[Thing]] to read a boolean value from.\r\n * @param property The given Property for which you want the boolean value.\r\n * @returns A boolean value for the given Property, if present, or null otherwise.\r\n */\r\nfunction getBoolean(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.boolean);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeBoolean(literalString);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the boolean values from.\r\n * @param property The given Property for which you want the boolean values.\r\n * @returns The boolean values for the given Property.\r\n */\r\nfunction getBooleanAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.boolean);\r\n    return literalStrings\r\n        .map(deserializeBoolean)\r\n        .filter((possibleBoolean) => possibleBoolean !== null);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a datetime value from.\r\n * @param property The given Property for which you want the datetime value.\r\n * @returns A datetime value for the given Property, if present, or null otherwise.\r\n */\r\nfunction getDatetime(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.dateTime);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeDatetime(literalString);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the datetime values from.\r\n * @param property The given Property for which you want the datetime values.\r\n * @returns The datetime values for the given Property.\r\n */\r\nfunction getDatetimeAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.dateTime);\r\n    return literalStrings\r\n        .map(deserializeDatetime)\r\n        .filter((potentialDatetime) => potentialDatetime !== null);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a decimal value from.\r\n * @param property The given Property for which you want the decimal value.\r\n * @returns A decimal value for the given Property, if present, or null otherwise.\r\n */\r\nfunction getDecimal(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.decimal);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeDecimal(literalString);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the decimal values from.\r\n * @param property The given Property for which you want the decimal values.\r\n * @returns The decimal values for the given Property.\r\n */\r\nfunction getDecimalAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.decimal);\r\n    return literalStrings\r\n        .map((literalString) => deserializeDecimal(literalString))\r\n        .filter((potentialDecimal) => potentialDecimal !== null);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read an integer value from.\r\n * @param property The given Property for which you want the integer value.\r\n * @returns An integer value for the given Property, if present, or null otherwise.\r\n */\r\nfunction getInteger(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.integer);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeInteger(literalString);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the integer values from.\r\n * @param property The given Property for which you want the integer values.\r\n * @returns The integer values for the given Property.\r\n */\r\nfunction getIntegerAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.integer);\r\n    return literalStrings\r\n        .map((literalString) => deserializeInteger(literalString))\r\n        .filter((potentialInteger) => potentialInteger !== null);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a localised string value from.\r\n * @param property The given Property for which you want the localised string value.\r\n * @param locale The desired locale for the string value.\r\n * @returns A localised string value for the given Property, if present in `locale`, or null otherwise.\r\n */\r\nfunction getStringWithLocale(thing, property, locale) {\r\n    internal_throwIfNotThing(thing);\r\n    const localeStringMatcher = getLocaleStringMatcher(property, locale);\r\n    const matchingQuad = findOne(thing, localeStringMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object.value;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the localised string values from.\r\n * @param property The given Property for which you want the localised string values.\r\n * @param locale The desired locale for the string values.\r\n * @returns The localised string values for the given Property.\r\n */\r\nfunction getStringWithLocaleAll(thing, property, locale) {\r\n    internal_throwIfNotThing(thing);\r\n    const localeStringMatcher = getLocaleStringMatcher(property, locale);\r\n    const matchingQuads = findAll(thing, localeStringMatcher);\r\n    return matchingQuads.map((quad) => quad.object.value);\r\n}\r\n/**\r\n * Retrieves all language string literals for the specified property from the\r\n * specified [[Thing]] (explicitly filters out non-language string literals).\r\n *\r\n * @param thing The [[Thing]] to read the localised string values from.\r\n * @param property The given Property for which you want the localised string values.\r\n * @returns A Map of objects, keyed on locale with the value an array of string values (for that locale).\r\n */\r\nfunction getStringByLocaleAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalMatcher = getLiteralMatcher(property);\r\n    const matchingQuads = findAll(thing, literalMatcher);\r\n    const result = new Map();\r\n    matchingQuads.map((quad) => {\r\n        if (quad.object.datatype.value === xmlSchemaTypes.langString) {\r\n            const languageTag = quad.object.language;\r\n            const current = result.get(languageTag);\r\n            current\r\n                ? result.set(languageTag, [...current, quad.object.value])\r\n                : result.set(languageTag, [quad.object.value]);\r\n        }\r\n    });\r\n    return result;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a string value from.\r\n * @param property The given Property for which you want the string value.\r\n * @returns A string value for the given Property, if present, or null otherwise.\r\n */\r\nfunction getStringNoLocale(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.string);\r\n    return literalString;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the string values from.\r\n * @param property The given Property for which you want the string values.\r\n * @returns The string values for the given Property.\r\n */\r\nfunction getStringNoLocaleAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.string);\r\n    return literalStrings;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a NamedNode value from.\r\n * @param property The given Property for which you want the NamedNode value.\r\n * @returns A NamedNode value for the given Property, if present, or null otherwise.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#namednode-interface\r\n */\r\nfunction getNamedNode(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const namedNodeMatcher = getNamedNodeMatcher(property);\r\n    const matchingQuad = findOne(thing, namedNodeMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the NamedNode values from.\r\n * @param property The given Property for which you want the NamedNode values.\r\n * @returns The NamedNode values for the given Property.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#namednode-interface\r\n */\r\nfunction getNamedNodeAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const namedNodeMatcher = getNamedNodeMatcher(property);\r\n    const matchingQuads = findAll(thing, namedNodeMatcher);\r\n    return matchingQuads.map((quad) => quad.object);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a Literal value from.\r\n * @param property The given Property for which you want the Literal value.\r\n * @returns A Literal value for the given Property, if present, or null otherwise.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#literal-interface\r\n */\r\nfunction getLiteral(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalMatcher = getLiteralMatcher(property);\r\n    const matchingQuad = findOne(thing, literalMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the Literal values from.\r\n * @param property The given Property for which you want the Literal values.\r\n * @returns The Literal values for the given Property.\r\n * @ignore This should not be needed due to the other get*All() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#literal-interface\r\n */\r\nfunction getLiteralAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalMatcher = getLiteralMatcher(property);\r\n    const matchingQuads = findAll(thing, literalMatcher);\r\n    return matchingQuads.map((quad) => quad.object);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a raw RDF/JS value from.\r\n * @param property The given Property for which you want the raw value.\r\n * @returns A Term for the given Property, if present, or null otherwise.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/\r\n * @since 0.3.0\r\n */\r\nfunction getTerm(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const termMatcher = getTermMatcher(property);\r\n    const matchingQuad = findOne(thing, termMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the raw RDF/JS values from.\r\n * @param property The given Property for which you want the raw values.\r\n * @returns The Terms for the given Property.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/\r\n * @since 0.3.0\r\n */\r\nfunction getTermAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const namedNodeMatcher = getTermMatcher(property);\r\n    const matchingQuads = findAll(thing, namedNodeMatcher);\r\n    return matchingQuads.map((quad) => quad.object);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to extract a Quad from.\r\n * @param matcher Callback function that returns a boolean indicating whether a given Quad should be included.\r\n * @returns First Quad in `thing` for which `matcher` returned true.\r\n */\r\nfunction findOne(thing, matcher) {\r\n    for (const quad of thing) {\r\n        if (matcher(quad)) {\r\n            return quad;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to extract Quads from.\r\n * @param matcher Callback function that returns a boolean indicating whether a given Quad should be included.\r\n * @returns All Quads in `thing` for which `matcher` returned true.\r\n */\r\nfunction findAll(thing, matcher) {\r\n    const matched = [];\r\n    for (const quad of thing) {\r\n        if (matcher(quad)) {\r\n            matched.push(quad);\r\n        }\r\n    }\r\n    return matched;\r\n}\r\nfunction getNamedNodeMatcher(property) {\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const matcher = function matcher(quad) {\r\n        return predicateNode.equals(quad.predicate) && isNamedNode(quad.object);\r\n    };\r\n    return matcher;\r\n}\r\nfunction getLiteralMatcher(property) {\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const matcher = function matcher(quad) {\r\n        return predicateNode.equals(quad.predicate) && isLiteral(quad.object);\r\n    };\r\n    return matcher;\r\n}\r\nfunction getTermMatcher(property) {\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const matcher = function matcher(quad) {\r\n        return predicateNode.equals(quad.predicate) && isTerm(quad.object);\r\n    };\r\n    return matcher;\r\n}\r\nfunction getLiteralOfTypeMatcher(property, datatype) {\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const matcher = function matcher(quad) {\r\n        return (predicateNode.equals(quad.predicate) &&\r\n            isLiteral(quad.object) &&\r\n            quad.object.datatype.value === datatype);\r\n    };\r\n    return matcher;\r\n}\r\nfunction getLocaleStringMatcher(property, locale) {\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const matcher = function matcher(quad) {\r\n        return (predicateNode.equals(quad.predicate) &&\r\n            isLiteral(quad.object) &&\r\n            quad.object.datatype.value === xmlSchemaTypes.langString &&\r\n            quad.object.language.toLowerCase() === locale.toLowerCase());\r\n    };\r\n    return matcher;\r\n}\r\n/**\r\n * @param thing The [Thing]] to read a Literal of the given type from.\r\n * @param property The given Property for which you want the Literal value.\r\n * @param literalType Set type of the Literal data.\r\n * @returns The stringified value for the given Property and type, if present, or null otherwise.\r\n */\r\nfunction getLiteralOfType(thing, property, literalType) {\r\n    const literalOfTypeMatcher = getLiteralOfTypeMatcher(property, literalType);\r\n    const matchingQuad = findOne(thing, literalOfTypeMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object.value;\r\n}\r\n/**\r\n * @param thing The [Thing]] to read the Literals of the given type from.\r\n * @param property The given Property for which you want the Literal values.\r\n * @param literalType Set type of the Literal data.\r\n * @returns The stringified values for the given Property and type.\r\n */\r\nfunction getLiteralAllOfType(thing, property, literalType) {\r\n    const literalOfTypeMatcher = getLiteralOfTypeMatcher(property, literalType);\r\n    const matchingQuads = findAll(thing, literalOfTypeMatcher);\r\n    return matchingQuads.map((quad) => quad.object.value);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Extract Quads with a given Subject from a [[SolidDataset]] into a [[Thing]].\r\n *\r\n * @param solidDataset The [[SolidDataset]] to extract the [[Thing]] from.\r\n * @param thingUrl The URL of the desired [[Thing]].\r\n * @param options Not yet implemented.\r\n */\r\nfunction getThing(solidDataset, thingUrl, options = {}) {\r\n    if (!isLocalNode(thingUrl) && !internal_isValidUrl(thingUrl)) {\r\n        throw new ValidThingUrlExpectedError(thingUrl);\r\n    }\r\n    const subject = isLocalNode(thingUrl) ? thingUrl : asNamedNode(thingUrl);\r\n    const scope = options.scope\r\n        ? asNamedNode(options.scope)\r\n        : null;\r\n    const thingDataset = solidDataset.match(subject, null, null, scope);\r\n    if (thingDataset.size === 0) {\r\n        return null;\r\n    }\r\n    if (isLocalNode(subject)) {\r\n        const thing = Object.assign(thingDataset, {\r\n            internal_localSubject: subject,\r\n        });\r\n        return thing;\r\n    }\r\n    else {\r\n        const thing = Object.assign(thingDataset, {\r\n            internal_url: subject.value,\r\n        });\r\n        return thing;\r\n    }\r\n}\r\n/**\r\n * Get all [[Thing]]s about which a [[SolidDataset]] contains Quads.\r\n *\r\n * @param solidDataset The [[SolidDataset]] to extract the [[Thing]]s from.\r\n * @param options Not yet implemented.\r\n */\r\nfunction getThingAll(solidDataset, options = {}) {\r\n    const subjectNodes = new Array();\r\n    for (const quad of solidDataset) {\r\n        // Because NamedNode objects with the same IRI are actually different\r\n        // object instances, we have to manually check whether `subjectNodes` does\r\n        // not yet include `quadSubject` before adding it.\r\n        const quadSubject = quad.subject;\r\n        if (isNamedNode(quadSubject) &&\r\n            !subjectNodes.some((subjectNode) => isEqual(subjectNode, quadSubject))) {\r\n            subjectNodes.push(quadSubject);\r\n        }\r\n        if (isLocalNode(quadSubject) &&\r\n            !subjectNodes.some((subjectNode) => isEqual(subjectNode, quadSubject))) {\r\n            subjectNodes.push(quadSubject);\r\n        }\r\n    }\r\n    const things = subjectNodes.map((subjectNode) => getThing(solidDataset, subjectNode, options)\r\n    // We can make the type assertion here because `getThing` only returns `null` if no data with\r\n    // the given subject node can be found, and in this case the subject node was extracted from\r\n    // existing data (i.e. that can be found by definition):\r\n    );\r\n    return things;\r\n}\r\n/**\r\n * Insert a [[Thing]] into a [[SolidDataset]], replacing previous instances of that Thing.\r\n *\r\n * @param solidDataset The SolidDataset to insert a Thing into.\r\n * @param thing The Thing to insert into the given SolidDataset.\r\n * @returns A new SolidDataset equal to the given SolidDataset, but with the given Thing.\r\n */\r\nfunction setThing(solidDataset, thing) {\r\n    const newDataset = removeThing(solidDataset, thing);\r\n    newDataset.internal_changeLog = {\r\n        additions: [...newDataset.internal_changeLog.additions],\r\n        deletions: [...newDataset.internal_changeLog.deletions],\r\n    };\r\n    for (const quad of thing) {\r\n        newDataset.add(quad);\r\n        if (newDataset.internal_changeLog.deletions.includes(quad)) {\r\n            newDataset.internal_changeLog.deletions = newDataset.internal_changeLog.deletions.filter((deletion) => deletion !== quad);\r\n        }\r\n        else {\r\n            newDataset.internal_changeLog.additions.push(quad);\r\n        }\r\n    }\r\n    return newDataset;\r\n}\r\n/**\r\n * Remove a Thing from a SolidDataset.\r\n *\r\n * @param solidDataset The SolidDataset to remove a Thing from.\r\n * @param thing The Thing to remove from `solidDataset`.\r\n * @returns A new [[SolidDataset]] equal to the input SolidDataset, excluding the given Thing.\r\n */\r\nfunction removeThing(solidDataset, thing) {\r\n    const newSolidDataset = withChangeLog(internal_cloneResource(solidDataset));\r\n    newSolidDataset.internal_changeLog = {\r\n        additions: [...newSolidDataset.internal_changeLog.additions],\r\n        deletions: [...newSolidDataset.internal_changeLog.deletions],\r\n    };\r\n    const resourceIri = hasResourceInfo(newSolidDataset)\r\n        ? getSourceUrl(newSolidDataset)\r\n        : undefined;\r\n    const thingSubject = internal_toNode(thing);\r\n    const existingQuads = Array.from(newSolidDataset);\r\n    existingQuads.forEach((quad) => {\r\n        if (!isNamedNode(quad.subject) && !isLocalNode(quad.subject)) {\r\n            // This data is unexpected, and hence unlikely to be added by us. Thus, leave it intact:\r\n            return;\r\n        }\r\n        if (isEqual(thingSubject, quad.subject, { resourceIri: resourceIri })) {\r\n            newSolidDataset.delete(quad);\r\n            if (newSolidDataset.internal_changeLog.additions.includes(quad)) {\r\n                newSolidDataset.internal_changeLog.additions = newSolidDataset.internal_changeLog.additions.filter((addition) => addition !== quad);\r\n            }\r\n            else {\r\n                newSolidDataset.internal_changeLog.deletions.push(quad);\r\n            }\r\n        }\r\n    });\r\n    return newSolidDataset;\r\n}\r\nfunction withChangeLog(solidDataset) {\r\n    const newSolidDataset = hasChangelog(solidDataset)\r\n        ? solidDataset\r\n        : Object.assign(internal_cloneResource(solidDataset), {\r\n            internal_changeLog: { additions: [], deletions: [] },\r\n        });\r\n    return newSolidDataset;\r\n}\r\nfunction createThing(options = {}) {\r\n    var _a;\r\n    if (typeof options.url !== \"undefined\") {\r\n        const url = options.url;\r\n        if (!internal_isValidUrl(url)) {\r\n            throw new ValidThingUrlExpectedError(url);\r\n        }\r\n        const thing = Object.assign(dataset(), {\r\n            internal_url: url,\r\n        });\r\n        return thing;\r\n    }\r\n    const name = (_a = options.name) !== null && _a !== void 0 ? _a : generateName();\r\n    const localSubject = getLocalNode(name);\r\n    const thing = Object.assign(dataset(), {\r\n        internal_localSubject: localSubject,\r\n    });\r\n    return thing;\r\n}\r\n/**\r\n * @param input An value that might be a [[Thing]].\r\n * @returns Whether `input` is a Thing.\r\n * @since 0.2.0\r\n */\r\nfunction isThing(input) {\r\n    return (internal_isDatasetCore(input) &&\r\n        (isThingLocal(input) ||\r\n            typeof input.internal_url === \"string\"));\r\n}\r\nfunction asUrl(thing, baseUrl) {\r\n    if (isThingLocal(thing)) {\r\n        if (typeof baseUrl === \"undefined\") {\r\n            throw new Error(\"The URL of a Thing that has not been persisted cannot be determined without a base URL.\");\r\n        }\r\n        return resolveLocalIri(thing.internal_localSubject.internal_name, baseUrl);\r\n    }\r\n    return thing.internal_url;\r\n}\r\n/** @hidden Alias of [[asUrl]] for those who prefer IRI terminology. */\r\nconst asIri = asUrl;\r\n/**\r\n * Gets a human-readable representation of the given Thing to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param thing The Thing to get a human-readable representation of.\r\n * @since 0.3.0\r\n */\r\nfunction thingAsMarkdown(thing) {\r\n    let thingAsMarkdown = \"\";\r\n    if (isThingLocal(thing)) {\r\n        thingAsMarkdown += `## Thing (no URL yet — identifier: \\`#${thing.internal_localSubject.internal_name}\\`)\\n`;\r\n    }\r\n    else {\r\n        thingAsMarkdown += `## Thing: ${thing.internal_url}\\n`;\r\n    }\r\n    const quads = Array.from(thing);\r\n    if (quads.length === 0) {\r\n        thingAsMarkdown += \"\\n<empty>\\n\";\r\n    }\r\n    else {\r\n        const predicates = new Set(quads.map((quad) => quad.predicate.value));\r\n        for (const predicate of predicates) {\r\n            thingAsMarkdown += `\\nProperty: ${predicate}\\n`;\r\n            const values = getTermAll(thing, predicate);\r\n            values.forEach((value) => {\r\n                thingAsMarkdown += `- ${internal_getReadableValue(value)}\\n`;\r\n            });\r\n        }\r\n    }\r\n    return thingAsMarkdown;\r\n}\r\n/**\r\n * @param thing The [[Thing]] of which a URL might or might not be known.\r\n * @return Whether `thing` has no known URL yet.\r\n */\r\nfunction isThingLocal(thing) {\r\n    var _a;\r\n    return (typeof ((_a = thing.internal_localSubject) === null || _a === void 0 ? void 0 : _a.internal_name) ===\r\n        \"string\" && typeof thing.internal_url === \"undefined\");\r\n}\r\n/**\r\n * This error is thrown when a function expected to receive a [[Thing]] but received something else.\r\n * @since 1.2.0\r\n */\r\nclass ThingExpectedError extends SolidClientError {\r\n    constructor(receivedValue) {\r\n        const message = `Expected a Thing, but received: \\`${receivedValue}\\`.`;\r\n        super(message);\r\n        this.receivedValue = receivedValue;\r\n    }\r\n}\r\n/**\r\n * This error is thrown when a function expected to receive a valid URL to identify a property but received something else.\r\n */\r\nclass ValidPropertyUrlExpectedError extends SolidClientError {\r\n    constructor(receivedValue) {\r\n        const value = isNamedNode(receivedValue)\r\n            ? receivedValue.value\r\n            : receivedValue;\r\n        const message = `Expected a valid URL to identify a property, but received: \\`${value}\\`.`;\r\n        super(message);\r\n        this.receivedProperty = value;\r\n    }\r\n}\r\n/**\r\n * This error is thrown when a function expected to receive a valid URL value but received something else.\r\n */\r\nclass ValidValueUrlExpectedError extends SolidClientError {\r\n    constructor(receivedValue) {\r\n        const value = isNamedNode(receivedValue)\r\n            ? receivedValue.value\r\n            : receivedValue;\r\n        const message = `Expected a valid URL value, but received: \\`${value}\\`.`;\r\n        super(message);\r\n        this.receivedValue = value;\r\n    }\r\n}\r\n/**\r\n * This error is thrown when a function expected to receive a valid URL to identify a [[Thing]] but received something else.\r\n */\r\nclass ValidThingUrlExpectedError extends SolidClientError {\r\n    constructor(receivedValue) {\r\n        const value = isNamedNode(receivedValue)\r\n            ? receivedValue.value\r\n            : receivedValue;\r\n        const message = `Expected a valid URL to identify a Thing, but received: \\`${value}\\`.`;\r\n        super(message);\r\n        this.receivedValue = value;\r\n    }\r\n}\r\n/**\r\n * Generate a string that can be used as the unique identifier for a Thing\r\n *\r\n * This function works by starting with a date string (so that Things can be\r\n * sorted chronologically), followed by a random number generated by taking a\r\n * random number between 0 and 1, and cutting off the `0.`.\r\n *\r\n * @internal\r\n * @returns An string that's likely to be unique\r\n */\r\nconst generateName = () => {\r\n    return (Date.now().toString() + Math.random().toString().substring(\"0.\".length));\r\n};\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Initialise a new [[SolidDataset]] in memory.\r\n *\r\n * @returns An empty [[SolidDataset]].\r\n */\r\nfunction createSolidDataset() {\r\n    return dataset();\r\n}\r\n/**\r\n * Fetch a SolidDataset from the given URL. Currently requires the SolidDataset to be available as [Turtle](https://www.w3.org/TR/turtle/).\r\n *\r\n * @param url URL to fetch a [[SolidDataset]] from.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Promise resolving to a [[SolidDataset]] containing the data at the given Resource, or rejecting if fetching it failed.\r\n */\r\nasync function getSolidDataset(url, options = internal_defaultFetchOptions) {\r\n    url = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const response = await config.fetch(url, {\r\n        headers: {\r\n            Accept: \"text/turtle\",\r\n        },\r\n    });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Fetching the Resource at \\`${url}\\` failed: \\`${response.status}\\` \\`${response.statusText}\\`.`, response);\r\n    }\r\n    const data = await response.text();\r\n    const triples = await turtleToTriples(data, url);\r\n    const resource = dataset();\r\n    triples.forEach((triple) => resource.add(triple));\r\n    const resourceInfo = internal_parseResourceInfo(response);\r\n    const resourceWithResourceInfo = Object.assign(resource, {\r\n        internal_resourceInfo: resourceInfo,\r\n    });\r\n    return resourceWithResourceInfo;\r\n}\r\n/**\r\n * Create a SPARQL UPDATE Patch request from a [[SolidDataset]] with a changelog.\r\n * @param solidDataset the [[SolidDataset]] that has been locally updated, and that should be persisted.\r\n * @returns an HTTP PATCH request configuration object, aligned with the [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters), containing a SPARQL UPDATE.\r\n * @hidden\r\n */\r\nasync function prepareSolidDatasetUpdate(solidDataset) {\r\n    const deleteStatement = solidDataset.internal_changeLog.deletions.length > 0\r\n        ? `DELETE DATA {${(await triplesToTurtle(solidDataset.internal_changeLog.deletions.map(getNamedNodesForLocalNodes))).trim()}};`\r\n        : \"\";\r\n    const insertStatement = solidDataset.internal_changeLog.additions.length > 0\r\n        ? `INSERT DATA {${(await triplesToTurtle(solidDataset.internal_changeLog.additions.map(getNamedNodesForLocalNodes))).trim()}};`\r\n        : \"\";\r\n    return {\r\n        method: \"PATCH\",\r\n        body: `${deleteStatement} ${insertStatement}`,\r\n        headers: {\r\n            \"Content-Type\": \"application/sparql-update\",\r\n        },\r\n    };\r\n}\r\n/**\r\n * Create a Put request to write a locally created [[SolidDataset]] to a Pod.\r\n * @param solidDataset the [[SolidDataset]] that has been locally updated, and that should be persisted.\r\n * @returns an HTTP PUT request configuration object, aligned with the [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters), containing a serialization of the [[SolidDataset]].\r\n * @hidden\r\n */\r\nasync function prepareSolidDatasetCreation(solidDataset) {\r\n    return {\r\n        method: \"PUT\",\r\n        body: await triplesToTurtle(Array.from(solidDataset).map(getNamedNodesForLocalNodes)),\r\n        headers: {\r\n            \"Content-Type\": \"text/turtle\",\r\n            \"If-None-Match\": \"*\",\r\n            Link: '<http://www.w3.org/ns/ldp#Resource>; rel=\"type\"',\r\n        },\r\n    };\r\n}\r\n/**\r\n * Given a SolidDataset, store it in a Solid Pod (overwriting the existing data at the given URL).\r\n *\r\n * A SolidDataset keeps track of the data changes compared to the data in the Pod; i.e.,\r\n * the changelog tracks both the old value and new values of the property being modified. This\r\n * function applies the changes to the current SolidDataset. If the old value specified in the\r\n * changelog does not correspond to the value currently in the Pod, this function will throw an\r\n * error.\r\n * The SolidDataset returned by this function will contain the data sent to the Pod, and a ChangeLog\r\n * up-to-date with the saved data. Note that if the data on the server was modified in between the\r\n * first fetch and saving it, the updated data will not be reflected in the returned SolidDataset.\r\n * To make sure you have the latest data, call [[getSolidDataset]] again after saving the data.\r\n *\r\n * The Solid server will create any intermediary Containers that do not exist yet, so they do not\r\n * need to be created in advance. For example, if the target URL is\r\n * https://example.pod/container/resource and https://example.pod/container/ does not exist yet,\r\n * it will exist after this function resolves successfully.\r\n *\r\n * @param url URL to save `solidDataset` to.\r\n * @param solidDataset The [[SolidDataset]] to save.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Promise resolving to a [[SolidDataset]] containing the stored data, or rejecting if saving it failed.\r\n */\r\nasync function saveSolidDatasetAt(url, solidDataset, options = internal_defaultFetchOptions) {\r\n    url = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const requestInit = isUpdate(solidDataset, url)\r\n        ? await prepareSolidDatasetUpdate(solidDataset)\r\n        : await prepareSolidDatasetCreation(solidDataset);\r\n    const response = await config.fetch(url, requestInit);\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        const diagnostics = isUpdate(solidDataset, url)\r\n            ? \"The changes that were sent to the Pod are listed below.\\n\\n\" +\r\n                changeLogAsMarkdown(solidDataset)\r\n            : \"The SolidDataset that was sent to the Pod is listed below.\\n\\n\" +\r\n                solidDatasetAsMarkdown(solidDataset);\r\n        throw new FetchError(`Storing the Resource at \\`${url}\\` failed: \\`${response.status}\\` \\`${response.statusText}\\`.\\n\\n` +\r\n            diagnostics, response);\r\n    }\r\n    const resourceInfo = Object.assign(Object.assign({}, internal_parseResourceInfo(response)), { sourceIri: url, isRawData: false });\r\n    const storedDataset = Object.assign(internal_cloneResource(solidDataset), {\r\n        internal_changeLog: { additions: [], deletions: [] },\r\n        internal_resourceInfo: resourceInfo,\r\n    });\r\n    const storedDatasetWithResolvedIris = resolveLocalIrisInSolidDataset(storedDataset);\r\n    return storedDatasetWithResolvedIris;\r\n}\r\n/**\r\n * Deletes the SolidDataset at a given URL.\r\n *\r\n * @param file The (URL of the) SolidDataset to delete\r\n * @since 0.6.0\r\n */\r\nasync function deleteSolidDataset(solidDataset, options = internal_defaultFetchOptions) {\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const url = hasResourceInfo(solidDataset)\r\n        ? internal_toIriString(getSourceUrl(solidDataset))\r\n        : internal_toIriString(solidDataset);\r\n    const response = await config.fetch(url, { method: \"DELETE\" });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Deleting the SolidDataset at \\`${url}\\` failed: \\`${response.status}\\` \\`${response.statusText}\\`.`, response);\r\n    }\r\n}\r\n/**\r\n * Create an empty Container at the given URL.\r\n *\r\n * Throws an error if creating the Container failed, e.g. because the current user does not have\r\n * permissions to, or because the Container already exists.\r\n *\r\n * Note that a Solid server will automatically create the necessary Containers when storing a\r\n * Resource; i.e. there is no need to call this function if it is immediately followed by\r\n * [[saveSolidDatasetAt]] or [[overwriteFile]].\r\n *\r\n * @param url URL of the empty Container that is to be created.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @since 0.2.0\r\n */\r\nasync function createContainerAt(url, options = internal_defaultFetchOptions) {\r\n    url = internal_toIriString(url);\r\n    url = url.endsWith(\"/\") ? url : url + \"/\";\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const response = await config.fetch(url, {\r\n        method: \"PUT\",\r\n        headers: {\r\n            Accept: \"text/turtle\",\r\n            \"Content-Type\": \"text/turtle\",\r\n            \"If-None-Match\": \"*\",\r\n            // This header should not be required to create a Container,\r\n            // but ESS currently expects it:\r\n            Link: '<http://www.w3.org/ns/ldp#BasicContainer>; rel=\"type\"',\r\n        },\r\n    });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        if (response.status === 409 &&\r\n            response.statusText === \"Conflict\" &&\r\n            (await response.text()).trim() ===\r\n                internal_NSS_CREATE_CONTAINER_SPEC_NONCOMPLIANCE_DETECTION_ERROR_MESSAGE_TO_WORKAROUND_THEIR_ISSUE_1465) {\r\n            return createContainerWithNssWorkaroundAt(url, options);\r\n        }\r\n        throw new FetchError(`Creating the empty Container at \\`${url}\\` failed: \\`${response.status}\\` \\`${response.statusText}\\`.`, response);\r\n    }\r\n    const resourceInfo = internal_parseResourceInfo(response);\r\n    const containerDataset = Object.assign(dataset(), {\r\n        internal_changeLog: { additions: [], deletions: [] },\r\n        internal_resourceInfo: resourceInfo,\r\n    });\r\n    return containerDataset;\r\n}\r\n/**\r\n * Unfortunately Node Solid Server does not confirm to the Solid spec when it comes to Container\r\n * creation. When we make the (valid, according to the Solid protocol) request to create a\r\n * Container, NSS responds with the following exact error message. Thus, when we encounter exactly\r\n * this message, we use an NSS-specific workaround ([[createContainerWithNssWorkaroundAt]]). Both\r\n * this constant and that workaround should be removed once the NSS issue has been fixed and\r\n * no versions of NSS with the issue are in common use/supported anymore.\r\n *\r\n * @see https://github.com/solid/node-solid-server/issues/1465\r\n * @internal\r\n */\r\nconst internal_NSS_CREATE_CONTAINER_SPEC_NONCOMPLIANCE_DETECTION_ERROR_MESSAGE_TO_WORKAROUND_THEIR_ISSUE_1465 = \"Can't write file: PUT not supported on containers, use POST instead\";\r\n/**\r\n * Unfortunately Node Solid Server does not confirm to the Solid spec when it comes to Container\r\n * creation. As a workaround, we create a dummy file _inside_ the desired Container (which should\r\n * create the desired Container on the fly), and then delete it again.\r\n *\r\n * @see https://github.com/solid/node-solid-server/issues/1465\r\n */\r\nconst createContainerWithNssWorkaroundAt = async (url, options) => {\r\n    url = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    let existingContainer;\r\n    try {\r\n        existingContainer = await getResourceInfo(url, options);\r\n    }\r\n    catch (e) {\r\n        // To create the Container, we'd want it to not exist yet. In other words, we'd expect to get\r\n        // a 404 error here in the happy path - so do nothing if that's the case.\r\n        if (!(e instanceof FetchError) || e.statusCode !== 404) {\r\n            // (But if we get an error other than a 404, just throw that error like we usually would.)\r\n            throw e;\r\n        }\r\n    }\r\n    if (typeof existingContainer !== \"undefined\") {\r\n        throw new Error(`The Container at \\`${url}\\` already exists, and therefore cannot be created again.`);\r\n    }\r\n    const dummyUrl = url + \".dummy\";\r\n    const createResponse = await config.fetch(dummyUrl, {\r\n        method: \"PUT\",\r\n        headers: {\r\n            Accept: \"text/turtle\",\r\n            \"Content-Type\": \"text/turtle\",\r\n        },\r\n    });\r\n    if (internal_isUnsuccessfulResponse(createResponse)) {\r\n        throw new FetchError(`Creating the empty Container at \\`${url}\\` failed: \\`${createResponse.status}\\` \\`${createResponse.statusText}\\`.`, createResponse);\r\n    }\r\n    await config.fetch(dummyUrl, { method: \"DELETE\" });\r\n    const containerInfoResponse = await config.fetch(url, { method: \"HEAD\" });\r\n    const resourceInfo = internal_parseResourceInfo(containerInfoResponse);\r\n    const containerDataset = Object.assign(dataset(), {\r\n        internal_changeLog: { additions: [], deletions: [] },\r\n        internal_resourceInfo: resourceInfo,\r\n    });\r\n    return containerDataset;\r\n};\r\nfunction isUpdate(solidDataset, url) {\r\n    return (hasChangelog(solidDataset) &&\r\n        hasResourceInfo(solidDataset) &&\r\n        typeof solidDataset.internal_resourceInfo.sourceIri === \"string\" &&\r\n        solidDataset.internal_resourceInfo.sourceIri === url);\r\n}\r\n/**\r\n * Given a SolidDataset, store it in a Solid Pod in a new Resource inside a Container.\r\n *\r\n * The Container at the given URL should already exist; if it does not, you can initialise it first\r\n * using [[createContainerAt]], or directly save the SolidDataset at the desired location using\r\n * [[saveSolidDatasetAt]].\r\n *\r\n * @param containerUrl URL of the Container in which to create a new Resource.\r\n * @param solidDataset The [[SolidDataset]] to save to a new Resource in the given Container.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Promise resolving to a [[SolidDataset]] containing the saved data. The Promise rejects if the save failed.\r\n */\r\nasync function saveSolidDatasetInContainer(containerUrl, solidDataset, options = internal_defaultFetchOptions) {\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    containerUrl = internal_toIriString(containerUrl);\r\n    const rawTurtle = await triplesToTurtle(Array.from(solidDataset).map(getNamedNodesForLocalNodes));\r\n    const headers = {\r\n        \"Content-Type\": \"text/turtle\",\r\n        Link: '<http://www.w3.org/ns/ldp#Resource>; rel=\"type\"',\r\n    };\r\n    if (options.slugSuggestion) {\r\n        headers.slug = options.slugSuggestion;\r\n    }\r\n    const response = await config.fetch(containerUrl, {\r\n        method: \"POST\",\r\n        body: rawTurtle,\r\n        headers: headers,\r\n    });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Storing the Resource in the Container at \\`${containerUrl}\\` failed: \\`${response.status}\\` \\`${response.statusText}\\`.\\n\\n` +\r\n            \"The SolidDataset that was sent to the Pod is listed below.\\n\\n\" +\r\n            solidDatasetAsMarkdown(solidDataset), response);\r\n    }\r\n    const locationHeader = response.headers.get(\"Location\");\r\n    if (locationHeader === null) {\r\n        throw new Error(\"Could not determine the location of the newly saved SolidDataset.\");\r\n    }\r\n    const resourceIri = new URL(locationHeader, new URL(containerUrl).origin)\r\n        .href;\r\n    const resourceInfo = {\r\n        internal_resourceInfo: {\r\n            isRawData: false,\r\n            sourceIri: resourceIri,\r\n        },\r\n    };\r\n    const resourceWithResourceInfo = Object.assign(internal_cloneResource(solidDataset), resourceInfo);\r\n    const resourceWithResolvedIris = resolveLocalIrisInSolidDataset(resourceWithResourceInfo);\r\n    return resourceWithResolvedIris;\r\n}\r\n/**\r\n * Create an empty Container inside the Container at the given URL.\r\n *\r\n * Throws an error if creating the Container failed, e.g. because the current user does not have\r\n * permissions to.\r\n *\r\n * The Container in which to create the new Container should itself already exist; if it does not.\r\n *\r\n * @param containerUrl URL of the Container in which the empty Container is to be created.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @since 0.2.0\r\n */\r\nasync function createContainerInContainer(containerUrl, options = internal_defaultFetchOptions) {\r\n    containerUrl = internal_toIriString(containerUrl);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const headers = {\r\n        \"Content-Type\": \"text/turtle\",\r\n        Link: '<http://www.w3.org/ns/ldp#BasicContainer>; rel=\"type\"',\r\n    };\r\n    if (options.slugSuggestion) {\r\n        headers.slug = options.slugSuggestion;\r\n    }\r\n    const response = await config.fetch(containerUrl, {\r\n        method: \"POST\",\r\n        headers: headers,\r\n    });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Creating an empty Container in the Container at \\`${containerUrl}\\` failed: \\`${response.status}\\` \\`${response.statusText}\\`.`, response);\r\n    }\r\n    const locationHeader = response.headers.get(\"Location\");\r\n    if (locationHeader === null) {\r\n        throw new Error(\"Could not determine the location of the newly created Container.\");\r\n    }\r\n    const resourceIri = new URL(locationHeader, new URL(containerUrl).origin)\r\n        .href;\r\n    const resourceInfo = {\r\n        internal_resourceInfo: {\r\n            isRawData: false,\r\n            sourceIri: resourceIri,\r\n        },\r\n    };\r\n    const resourceWithResourceInfo = Object.assign(dataset(), resourceInfo);\r\n    return resourceWithResourceInfo;\r\n}\r\n/**\r\n * Deletes the Container at a given URL.\r\n *\r\n * @param file The (URL of the) Container to delete\r\n * @since 0.6.0\r\n */\r\nasync function deleteContainer(container, options = internal_defaultFetchOptions) {\r\n    const url = hasResourceInfo(container)\r\n        ? internal_toIriString(getSourceUrl(container))\r\n        : internal_toIriString(container);\r\n    if (!isContainer(container)) {\r\n        throw new Error(`You're trying to delete the Container at \\`${url}\\`, but Container URLs should end in a \\`/\\`. Are you sure this is a Container?`);\r\n    }\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const response = await config.fetch(url, { method: \"DELETE\" });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Deleting the Container at \\`${url}\\` failed: \\`${response.status}\\` \\`${response.statusText}\\`.`, response);\r\n    }\r\n}\r\n/**\r\n * Gets a human-readable representation of the given SolidDataset to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param solidDataset The [[SolidDataset]] to get a human-readable representation of.\r\n * @since 0.3.0\r\n */\r\nfunction solidDatasetAsMarkdown(solidDataset) {\r\n    let readableSolidDataset = \"\";\r\n    if (hasResourceInfo(solidDataset)) {\r\n        readableSolidDataset += `# SolidDataset: ${solidDataset.internal_resourceInfo.sourceIri}\\n`;\r\n    }\r\n    else {\r\n        readableSolidDataset += `# SolidDataset (no URL yet)\\n`;\r\n    }\r\n    const things = getThingAll(solidDataset);\r\n    if (things.length === 0) {\r\n        readableSolidDataset += \"\\n<empty>\\n\";\r\n    }\r\n    else {\r\n        things.forEach((thing) => {\r\n            readableSolidDataset += \"\\n\" + thingAsMarkdown(thing);\r\n            if (hasChangelog(solidDataset)) {\r\n                readableSolidDataset +=\r\n                    \"\\n\" + getReadableChangeLogSummary(solidDataset, thing) + \"\\n\";\r\n            }\r\n        });\r\n    }\r\n    return readableSolidDataset;\r\n}\r\n/**\r\n * Gets a human-readable representation of the local changes to a Resource to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param solidDataset The Resource of which to get a human-readable representation of the changes applied to it locally.\r\n * @since 0.3.0\r\n */\r\nfunction changeLogAsMarkdown(solidDataset) {\r\n    if (!hasResourceInfo(solidDataset)) {\r\n        return \"This is a newly initialized SolidDataset, so there is no source to compare it to.\";\r\n    }\r\n    if (!hasChangelog(solidDataset) ||\r\n        (solidDataset.internal_changeLog.additions.length === 0 &&\r\n            solidDataset.internal_changeLog.deletions.length === 0)) {\r\n        return (`## Changes compared to ${getSourceUrl(solidDataset)}\\n\\n` +\r\n            `This SolidDataset has not been modified since it was fetched from ${getSourceUrl(solidDataset)}.\\n`);\r\n    }\r\n    let readableChangeLog = `## Changes compared to ${getSourceUrl(solidDataset)}\\n`;\r\n    const changeLogsByThingAndProperty = sortChangeLogByThingAndProperty(solidDataset);\r\n    Object.keys(changeLogsByThingAndProperty).forEach((thingUrl) => {\r\n        readableChangeLog += `\\n### Thing: ${thingUrl}\\n`;\r\n        const changeLogByProperty = changeLogsByThingAndProperty[thingUrl];\r\n        Object.keys(changeLogByProperty).forEach((propertyUrl) => {\r\n            readableChangeLog += `\\nProperty: ${propertyUrl}\\n`;\r\n            const deleted = changeLogByProperty[propertyUrl].deleted;\r\n            const added = changeLogByProperty[propertyUrl].added;\r\n            if (deleted.length > 0) {\r\n                readableChangeLog += \"- Removed:\\n\";\r\n                deleted.forEach((deletedValue) => (readableChangeLog += `  - ${internal_getReadableValue(deletedValue)}\\n`));\r\n            }\r\n            if (added.length > 0) {\r\n                readableChangeLog += \"- Added:\\n\";\r\n                added.forEach((addedValue) => (readableChangeLog += `  - ${internal_getReadableValue(addedValue)}\\n`));\r\n            }\r\n        });\r\n    });\r\n    return readableChangeLog;\r\n}\r\nfunction sortChangeLogByThingAndProperty(solidDataset) {\r\n    const changeLogsByThingAndProperty = {};\r\n    solidDataset.internal_changeLog.deletions.forEach((deletion) => {\r\n        var _a, _b;\r\n        var _c;\r\n        const subjectNode = isLocalNode(deletion.subject)\r\n            ? resolveIriForLocalNode(deletion.subject, getSourceUrl(solidDataset))\r\n            : deletion.subject;\r\n        if (!isNamedNode(subjectNode) || !isNamedNode(deletion.predicate)) {\r\n            return;\r\n        }\r\n        const thingUrl = internal_toIriString(subjectNode);\r\n        const propertyUrl = internal_toIriString(deletion.predicate);\r\n        (_a = changeLogsByThingAndProperty[thingUrl]) !== null && _a !== void 0 ? _a : (changeLogsByThingAndProperty[thingUrl] = {});\r\n        (_b = (_c = changeLogsByThingAndProperty[thingUrl])[propertyUrl]) !== null && _b !== void 0 ? _b : (_c[propertyUrl] = {\r\n            added: [],\r\n            deleted: [],\r\n        });\r\n        changeLogsByThingAndProperty[thingUrl][propertyUrl].deleted.push(deletion.object);\r\n    });\r\n    solidDataset.internal_changeLog.additions.forEach((addition) => {\r\n        var _a, _b;\r\n        var _c;\r\n        const subjectNode = isLocalNode(addition.subject)\r\n            ? resolveIriForLocalNode(addition.subject, getSourceUrl(solidDataset))\r\n            : addition.subject;\r\n        if (!isNamedNode(subjectNode) || !isNamedNode(addition.predicate)) {\r\n            return;\r\n        }\r\n        const thingUrl = internal_toIriString(subjectNode);\r\n        const propertyUrl = internal_toIriString(addition.predicate);\r\n        (_a = changeLogsByThingAndProperty[thingUrl]) !== null && _a !== void 0 ? _a : (changeLogsByThingAndProperty[thingUrl] = {});\r\n        (_b = (_c = changeLogsByThingAndProperty[thingUrl])[propertyUrl]) !== null && _b !== void 0 ? _b : (_c[propertyUrl] = {\r\n            added: [],\r\n            deleted: [],\r\n        });\r\n        changeLogsByThingAndProperty[thingUrl][propertyUrl].added.push(addition.object);\r\n    });\r\n    return changeLogsByThingAndProperty;\r\n}\r\nfunction getReadableChangeLogSummary(solidDataset, thing) {\r\n    const subject = internal_toNode(thing);\r\n    const nrOfAdditions = solidDataset.internal_changeLog.additions.reduce((count, addition) => (addition.subject.equals(subject) ? count + 1 : count), 0);\r\n    const nrOfDeletions = solidDataset.internal_changeLog.deletions.reduce((count, deletion) => (deletion.subject.equals(subject) ? count + 1 : count), 0);\r\n    const additionString = nrOfAdditions === 1\r\n        ? \"1 new value added\"\r\n        : nrOfAdditions + \" new values added\";\r\n    const deletionString = nrOfDeletions === 1 ? \"1 value removed\" : nrOfDeletions + \" values removed\";\r\n    return `(${additionString} / ${deletionString})`;\r\n}\r\nfunction getNamedNodesForLocalNodes(quad) {\r\n    const subject = isLocalNode(quad.subject)\r\n        ? getNamedNodeFromLocalNode(quad.subject)\r\n        : quad.subject;\r\n    const object = isLocalNode(quad.object)\r\n        ? getNamedNodeFromLocalNode(quad.object)\r\n        : quad.object;\r\n    return Object.assign(Object.assign({}, quad), { subject: subject, object: object });\r\n}\r\nfunction getNamedNodeFromLocalNode(localNode) {\r\n    return DataFactory.namedNode(\"#\" + localNode.internal_name);\r\n}\r\nfunction resolveLocalIrisInSolidDataset(solidDataset) {\r\n    const resourceIri = getSourceUrl(solidDataset);\r\n    const unresolvedQuads = Array.from(solidDataset);\r\n    unresolvedQuads.forEach((unresolvedQuad) => {\r\n        const resolvedQuad = resolveIriForLocalNodes(unresolvedQuad, resourceIri);\r\n        solidDataset.delete(unresolvedQuad);\r\n        solidDataset.add(resolvedQuad);\r\n    });\r\n    return solidDataset;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nconst { Response } = crossFetch;\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new [[SolidDataset]] with metadata as though the\r\n * SolidDataset has been retrieved from the given URL. The mock SolidDataset can be used in\r\n * unit tests that require persisted SolidDatasets; e.g., unit tests that call [[getSourceUrl]].\r\n *\r\n * @param url The URL from which the returned SolidDataset appears to be retrieved.\r\n * @returns A mock SolidDataset that appears to be retrieved from the `url`.\r\n * @since 0.2.0\r\n */\r\nfunction mockSolidDatasetFrom(url) {\r\n    const solidDataset = createSolidDataset();\r\n    const solidDatasetWithResourceInfo = Object.assign(solidDataset, {\r\n        internal_resourceInfo: {\r\n            sourceIri: internal_toIriString(url),\r\n            isRawData: false,\r\n            contentType: \"text/turtle\",\r\n            linkedResources: {},\r\n        },\r\n    });\r\n    return solidDatasetWithResourceInfo;\r\n}\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new Container [[SolidDataset]] with metadata as though the\r\n * Container has been retrieved from the given URL. The mock SolidDataset can be used in\r\n * unit tests that require persisted Containers; e.g., unit tests that call [[isContainer]].\r\n *\r\n * @param url The URL from which the returned Container appears to be retrieved. The `url` must end in a slash.\r\n * @returns A mock SolidDataset that appears to be retrieved from the `url`.\r\n * @since 0.2.0\r\n */\r\nfunction mockContainerFrom(url) {\r\n    const sourceIri = internal_toIriString(url);\r\n    if (!sourceIri.endsWith(\"/\")) {\r\n        throw new Error(\"A Container's URL should end in a slash. Please update your tests.\");\r\n    }\r\n    return mockSolidDatasetFrom(sourceIri);\r\n}\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new File with metadata as though the\r\n * File has been retrieved from the given URL. The mock File can be used in\r\n * unit tests that require persisted Files; e.g. unit tests that call [[getSourceUrl]].\r\n *\r\n * @param url The URL from which the returned File appears to be retrieved.\r\n * @returns A mock File that appears to be retrieved from the `url`.\r\n * @since 0.2.0\r\n */\r\nfunction mockFileFrom(url, options) {\r\n    const file = new Blob();\r\n    const fileWithResourceInfo = Object.assign(file, {\r\n        internal_resourceInfo: {\r\n            sourceIri: internal_toIriString(url),\r\n            isRawData: true,\r\n            contentType: options === null || options === void 0 ? void 0 : options.contentType,\r\n            linkedResources: {},\r\n        },\r\n    });\r\n    return fileWithResourceInfo;\r\n}\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new Error object with metadata as though the\r\n * it was the result of getting a 404 when trying to fetch the Resource at the\r\n * given URL. The mock Error can be used in unit tests that require functions\r\n * that fetch Resources (like [[getSolidDataset]]) to fail.\r\n *\r\n * @param url The URL of the Resource that could not be fetched according to the error.\r\n * @param statusCode Optional status code (defaults to 404) that caused the error.\r\n * @returns A mock Error that represents not having been able to fetch the Resource at `url` due to a 404 Response.\r\n * @since 1.1.0\r\n */\r\nfunction mockFetchError(fetchedUrl, statusCode = 404) {\r\n    const failedResponse = new Response(undefined, {\r\n        status: statusCode,\r\n    });\r\n    return new FetchError(`Fetching the Resource at \\`${fetchedUrl}\\` failed: \\`${failedResponse.status}\\` \\`${failedResponse.statusText}\\`.`, failedResponse);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Create a new Thing with a URL added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setUrl]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a URL value to.\r\n * @param property Property for which to add the given URL value.\r\n * @param url URL to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addUrl = (thing, property, url) => {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const newThing = internal_cloneThing(thing);\r\n    if (!isThing(url) && !internal_isValidUrl(url)) {\r\n        throw new ValidValueUrlExpectedError(url);\r\n    }\r\n    newThing.add(DataFactory.quad(internal_toNode(newThing), predicateNode, internal_toNode(url)));\r\n    return newThing;\r\n};\r\n/** @hidden Alias for [[addUrl]] for those who prefer IRI terminology. */\r\nconst addIri = addUrl;\r\n/**\r\n * Create a new Thing with a boolean added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setBoolean]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a boolean value to.\r\n * @param property Property for which to add the given boolean value.\r\n * @param value Boolean to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addBoolean = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, serializeBoolean(value), xmlSchemaTypes.boolean);\r\n};\r\n/**\r\n * Create a new Thing with a datetime added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setDatetime]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a datetime value to.\r\n * @param property Property for which to add the given datetime value.\r\n * @param value Datetime to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addDatetime = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, serializeDatetime(value), xmlSchemaTypes.dateTime);\r\n};\r\n/**\r\n * Create a new Thing with a decimal added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setDecimal]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a decimal value to.\r\n * @param property Property for which to add the given decimal value.\r\n * @param value Decimal to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addDecimal = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, serializeDecimal(value), xmlSchemaTypes.decimal);\r\n};\r\n/**\r\n * Create a new Thing with an integer added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setInteger]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add an integer value to.\r\n * @param property Property for which to add the given integer value.\r\n * @param value Integer to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addInteger = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, serializeInteger(value), xmlSchemaTypes.integer);\r\n};\r\n/**\r\n * Create a new Thing with a localised string added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setStringWithLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a localised string value to.\r\n * @param property Property for which to add the given string value.\r\n * @param value String to add to `thing` for the given `property`.\r\n * @param locale Locale of the added string.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nfunction addStringWithLocale(thing, property, value, locale) {\r\n    internal_throwIfNotThing(thing);\r\n    const literal = DataFactory.literal(value, normalizeLocale(locale));\r\n    return addLiteral(thing, property, literal);\r\n}\r\n/**\r\n * Create a new Thing with an unlocalised string added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setStringNoLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add an unlocalised string value to.\r\n * @param property Property for which to add the given string value.\r\n * @param value String to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addStringNoLocale = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, value, xmlSchemaTypes.string);\r\n};\r\n/**\r\n * Create a new Thing with a Named Node added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setNamedNode]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to add a Named Node to.\r\n * @param property Property for which to add a value.\r\n * @param value The Named Node to add.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nfunction addNamedNode(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    return addTerm(thing, property, value);\r\n}\r\n/**\r\n * Create a new Thing with a Literal added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setLiteral]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to add a Literal to.\r\n * @param property Property for which to add a value.\r\n * @param value The Literal to add.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nfunction addLiteral(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    return addTerm(thing, property, value);\r\n}\r\n/**\r\n * Creates a new Thing with a Term added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setTerm]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to add a Term to.\r\n * @param property Property for which to add a value.\r\n * @param value The Term to add.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n * @since 0.3.0\r\n */\r\nfunction addTerm(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const newThing = internal_cloneThing(thing);\r\n    newThing.add(DataFactory.quad(internal_toNode(newThing), predicateNode, value));\r\n    return newThing;\r\n}\r\nfunction addLiteralOfType(thing, property, value, type) {\r\n    const literal = DataFactory.literal(value, type);\r\n    return addLiteral(thing, property, literal);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nfunction removeAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const updatedThing = internal_filterThing(thing, (quad) => !quad.predicate.equals(predicateNode));\r\n    return updatedThing;\r\n}\r\n/**\r\n * Create a new Thing with the given URL removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a URL value from.\r\n * @param property Property for which to remove the given URL value.\r\n * @param value URL to remove from `thing` for the given `Property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeUrl = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    if (!isThing(value) && !internal_isValidUrl(value)) {\r\n        throw new ValidValueUrlExpectedError(value);\r\n    }\r\n    const iriNode = isNamedNode(value)\r\n        ? value\r\n        : typeof value === \"string\"\r\n            ? asNamedNode(value)\r\n            : asNamedNode(asIri(value));\r\n    const updatedThing = internal_filterThing(thing, (quad) => {\r\n        return (!quad.predicate.equals(predicateNode) ||\r\n            !isNamedNode(quad.object) ||\r\n            !quad.object.equals(iriNode));\r\n    });\r\n    return updatedThing;\r\n};\r\n/** @hidden Alias of [[removeUrl]] for those who prefer IRI terminology. */\r\nconst removeIri = removeUrl;\r\n/**\r\n * Create a new Thing with the given boolean removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a boolean value from.\r\n * @param property Property for which to remove the given boolean value.\r\n * @param value Boolean to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeBoolean = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.boolean, (foundBoolean) => deserializeBoolean(foundBoolean) === value);\r\n};\r\n/**\r\n * Create a new Thing with the given datetime removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a datetime value from.\r\n * @param property Property for which to remove the given datetime value.\r\n * @param value Datetime to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeDatetime = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.dateTime, (foundDatetime) => { var _a; return ((_a = deserializeDatetime(foundDatetime)) === null || _a === void 0 ? void 0 : _a.getTime()) === value.getTime(); });\r\n};\r\n/**\r\n * Create a new Thing with the given decimal removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a decimal value from.\r\n * @param property Property for which to remove the given decimal value.\r\n * @param value Decimal to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeDecimal = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.decimal, (foundDecimal) => deserializeDecimal(foundDecimal) === value);\r\n};\r\n/**\r\n * Create a new Thing with the given integer removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove an integer value from.\r\n * @param property Property for which to remove the given integer value.\r\n * @param value Integer to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeInteger = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.integer, (foundInteger) => deserializeInteger(foundInteger) === value);\r\n};\r\n/**\r\n * Create a new Thing with the given localised string removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a localised string value from.\r\n * @param property Property for which to remove the given localised string value.\r\n * @param value String to remove from `thing` for the given `property`.\r\n * @param locale Locale of the string to remove.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nfunction removeStringWithLocale(thing, property, value, locale) {\r\n    internal_throwIfNotThing(thing);\r\n    // Note: Due to how the `DataFactory.literal` constructor behaves, this function\r\n    // must call directly `removeLiteral` directly, with the locale as the data\r\n    // type of the Literal (which is not a valid NamedNode).\r\n    return removeLiteral(thing, property, DataFactory.literal(value, normalizeLocale(locale)));\r\n}\r\n/**\r\n * Create a new Thing with the given unlocalised string removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove an unlocalised string value from.\r\n * @param property Property for which to remove the given string value.\r\n * @param value String to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeStringNoLocale = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.string, (foundString) => foundString === value);\r\n};\r\n/**\r\n * @ignore This should not be needed due to the other remove*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing Thing to remove a NamedNode value from.\r\n * @param property Property for which to remove the given NamedNode value.\r\n * @param value NamedNode to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nfunction removeNamedNode(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const updatedThing = internal_filterThing(thing, (quad) => {\r\n        return (!quad.predicate.equals(predicateNode) ||\r\n            !isNamedNode(quad.object) ||\r\n            !quad.object.equals(value));\r\n    });\r\n    return updatedThing;\r\n}\r\n/**\r\n * @ignore This should not be needed due to the other remove*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing Thing to remove a Literal value from.\r\n * @param property Property for which to remove the given Literal value.\r\n * @param value Literal to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nfunction removeLiteral(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const updatedThing = internal_filterThing(thing, (quad) => {\r\n        return (!quad.predicate.equals(predicateNode) ||\r\n            !isLiteral(quad.object) ||\r\n            !quad.object.equals(value));\r\n    });\r\n    return updatedThing;\r\n}\r\n/**\r\n * @param thing Thing to remove a Literal value from.\r\n * @param property Property for which to remove the given Literal value.\r\n * @param type Data type that the Literal should be stored as.\r\n * @param matcher Function that returns true if the given value is an equivalent serialisation of the value to remove. For example, when removing a `false` boolean, the matcher should return true for both \"0\" and \"false\".\r\n */\r\nfunction removeLiteralMatching(thing, property, type, matcher) {\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const updatedThing = internal_filterThing(thing, (quad) => {\r\n        // Copy every value from the old thing into the new thing, unless it:\r\n        return !(\r\n        // has the predicate of the value-to-be-removed,\r\n        (quad.predicate.equals(predicateNode) &&\r\n            // also is a literal\r\n            isLiteral(quad.object) &&\r\n            // of the same type as the value-to-be-removed,\r\n            quad.object.datatype.equals(DataFactory.namedNode(type)) &&\r\n            // and has a value determined to be equal to the value-to-be-removed\r\n            // by the given matcher (i.e. because their serialisations are equal):\r\n            matcher(quad.object.value)));\r\n    });\r\n    return updatedThing;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Create a new Thing with existing values replaced by the given URL for the given Property.\r\n *\r\n * To preserve existing values, see [[addUrl]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a URL value on.\r\n * @param property Property for which to set the given URL value.\r\n * @param url URL to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setUrl = (thing, property, url) => {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    if (!isThing(url) && !internal_isValidUrl(url)) {\r\n        throw new ValidValueUrlExpectedError(url);\r\n    }\r\n    const newThing = removeAll(thing, property);\r\n    const predicateNode = asNamedNode(property);\r\n    newThing.add(DataFactory.quad(internal_toNode(newThing), predicateNode, internal_toNode(url)));\r\n    return newThing;\r\n};\r\n/** @hidden Alias of [[setUrl]] for those who prefer IRI terminology. */\r\nconst setIri = setUrl;\r\n/**\r\n * Create a new Thing with existing values replaced by the given boolean for the given Property.\r\n *\r\n * To preserve existing values, see [[addBoolean]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a boolean value on.\r\n * @param property Property for which to set the given boolean value.\r\n * @param value Boolean to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setBoolean = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return setLiteralOfType(thing, property, serializeBoolean(value), xmlSchemaTypes.boolean);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given datetime for the given Property.\r\n *\r\n * To preserve existing values, see [[addDatetime]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an datetime value on.\r\n * @param property Property for which to set the given datetime value.\r\n * @param value Datetime to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setDatetime = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return setLiteralOfType(thing, property, serializeDatetime(value), xmlSchemaTypes.dateTime);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given decimal for the given Property.\r\n *\r\n * To preserve existing values, see [[addDecimal]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a decimal value on.\r\n * @param property Property for which to set the given decimal value.\r\n * @param value Decimal to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setDecimal = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return setLiteralOfType(thing, property, serializeDecimal(value), xmlSchemaTypes.decimal);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given integer for the given Property.\r\n *\r\n * To preserve existing values, see [[addInteger]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an integer value on.\r\n * @param property Property for which to set the given integer value.\r\n * @param value Integer to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setInteger = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return setLiteralOfType(thing, property, serializeInteger(value), xmlSchemaTypes.integer);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given localised string for the given Property.\r\n *\r\n * To preserve existing values, see [[addStringWithLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a localised string value on.\r\n * @param property Property for which to set the given localised string value.\r\n * @param value Localised string to set on `thing` for the given `property`.\r\n * @param locale Locale of the added string.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nfunction setStringWithLocale(thing, property, value, locale) {\r\n    internal_throwIfNotThing(thing);\r\n    const literal = DataFactory.literal(value, normalizeLocale(locale));\r\n    return setLiteral(thing, property, literal);\r\n}\r\n/**\r\n * Create a new Thing with existing values replaced by the given unlocalised string for the given Property.\r\n *\r\n * To preserve existing values, see [[addStringNoLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an unlocalised string value on.\r\n * @param property Property for which to set the given unlocalised string value.\r\n * @param value Unlocalised string to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setStringNoLocale = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return setLiteralOfType(thing, property, value, xmlSchemaTypes.string);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given Named Node for the given Property.\r\n *\r\n * This replaces existing values for the given Property. To preserve them, see [[addNamedNode]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to set a NamedNode on.\r\n * @param property Property for which to set the value.\r\n * @param value The NamedNode to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nfunction setNamedNode(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    return setTerm(thing, property, value);\r\n}\r\n/**\r\n * Create a new Thing with existing values replaced by the given Literal for the given Property.\r\n *\r\n * This replaces existing values for the given Property. To preserve them, see [[addLiteral]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to set a Literal on.\r\n * @param property Property for which to set the value.\r\n * @param value The Literal to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nfunction setLiteral(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    return setTerm(thing, property, value);\r\n}\r\n/**\r\n * Creates a new Thing with existing values replaced by the given Term for the given Property.\r\n *\r\n * This replaces existing values for the given Property. To preserve them, see [[addTerm]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to set a Term on.\r\n * @param property Property for which to set the value.\r\n * @param value The raw RDF/JS value to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n * @since 0.3.0\r\n */\r\nfunction setTerm(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const newThing = removeAll(thing, property);\r\n    const predicateNode = asNamedNode(property);\r\n    newThing.add(DataFactory.quad(internal_toNode(newThing), predicateNode, value));\r\n    return newThing;\r\n}\r\nfunction setLiteralOfType(thing, property, value, type) {\r\n    const literal = DataFactory.literal(value, type);\r\n    return setLiteral(thing, property, literal);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Function for use in unit tests to mock a [[Thing]] with a given URL.\r\n *\r\n * Warning: do not use this function in actual production code.\r\n * This function initialises a new empty Thing and sets its URL to a given URL.\r\n * This is useful to mock a Thing in tests of code that call e.g.\r\n * [[asUrl]].\r\n *\r\n * @param url The URL that the mocked Thing pretends identifies it.\r\n * @returns A new Thing, pretending to be identified by the given URL.\r\n * @since 0.2.0\r\n */\r\nfunction mockThingFrom(url) {\r\n    const thing = Object.assign(dataset(), {\r\n        internal_url: internal_toIriString(url),\r\n    });\r\n    return thing;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n// TODO: These should be replaced by auto-generated constants,\r\n//       if we can ensure that unused constants will be excluded from bundles.\r\n/** @hidden */\r\nconst acl = {\r\n    Authorization: \"http://www.w3.org/ns/auth/acl#Authorization\",\r\n    accessTo: \"http://www.w3.org/ns/auth/acl#accessTo\",\r\n    agent: \"http://www.w3.org/ns/auth/acl#agent\",\r\n    agentGroup: \"http://www.w3.org/ns/auth/acl#agentGroup\",\r\n    agentClass: \"http://www.w3.org/ns/auth/acl#agentClass\",\r\n    default: \"http://www.w3.org/ns/auth/acl#default\",\r\n    defaultForNew: \"http://www.w3.org/ns/auth/acl#defaultForNew\",\r\n    mode: \"http://www.w3.org/ns/auth/acl#mode\",\r\n    origin: \"http://www.w3.org/ns/auth/acl#origin\",\r\n};\r\n/** @hidden */\r\nconst rdf = {\r\n    type: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",\r\n};\r\n/** @hidden */\r\nconst foaf = {\r\n    Agent: \"http://xmlns.com/foaf/0.1/Agent\",\r\n};\r\n/** @hidden */\r\nconst acp = {\r\n    Policy: \"http://www.w3.org/ns/solid/acp#Policy\",\r\n    AccessControl: \"http://www.w3.org/ns/solid/acp#AccessControl\",\r\n    Read: \"http://www.w3.org/ns/solid/acp#Read\",\r\n    Append: \"http://www.w3.org/ns/solid/acp#Append\",\r\n    Write: \"http://www.w3.org/ns/solid/acp#Write\",\r\n    Rule: \"http://www.w3.org/ns/solid/acp#Rule\",\r\n    accessControl: \"http://www.w3.org/ns/solid/acp#accessControl\",\r\n    apply: \"http://www.w3.org/ns/solid/acp#apply\",\r\n    applyMembers: \"http://www.w3.org/ns/solid/acp#applyMembers\",\r\n    allow: \"http://www.w3.org/ns/solid/acp#allow\",\r\n    deny: \"http://www.w3.org/ns/solid/acp#deny\",\r\n    allOf: \"http://www.w3.org/ns/solid/acp#allOf\",\r\n    anyOf: \"http://www.w3.org/ns/solid/acp#anyOf\",\r\n    noneOf: \"http://www.w3.org/ns/solid/acp#noneOf\",\r\n    access: \"http://www.w3.org/ns/solid/acp#access\",\r\n    accessMembers: \"http://www.w3.org/ns/solid/acp#accessMembers\",\r\n    agent: \"http://www.w3.org/ns/solid/acp#agent\",\r\n    group: \"http://www.w3.org/ns/solid/acp#group\",\r\n    PublicAgent: \"http://www.w3.org/ns/solid/acp#PublicAgent\",\r\n    AuthenticatedAgent: \"http://www.w3.org/ns/solid/acp#AuthenticatedAgent\",\r\n    CreatorAgent: \"http://www.w3.org/ns/solid/acp#CreatorAgent\",\r\n};\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * This (currently internal) function fetches the ACL indicated in the [[WithServerResourceInfo]]\r\n * attached to a resource.\r\n *\r\n * @internal\r\n * @param resourceInfo The Resource info with the ACL URL\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters).\r\n */\r\nasync function internal_fetchAcl(resourceInfo, options = internal_defaultFetchOptions) {\r\n    if (!hasAccessibleAcl(resourceInfo)) {\r\n        return {\r\n            resourceAcl: null,\r\n            fallbackAcl: null,\r\n        };\r\n    }\r\n    const resourceAcl = await internal_fetchResourceAcl(resourceInfo, options);\r\n    const acl = resourceAcl === null\r\n        ? {\r\n            resourceAcl: null,\r\n            fallbackAcl: await internal_fetchFallbackAcl(resourceInfo, options),\r\n        }\r\n        : { resourceAcl: resourceAcl, fallbackAcl: null };\r\n    return acl;\r\n}\r\n/** @internal */\r\nasync function internal_fetchResourceAcl(dataset, options = internal_defaultFetchOptions) {\r\n    if (!hasAccessibleAcl(dataset)) {\r\n        return null;\r\n    }\r\n    try {\r\n        const aclSolidDataset = await getSolidDataset(dataset.internal_resourceInfo.aclUrl, options);\r\n        return Object.assign(aclSolidDataset, {\r\n            internal_accessTo: getSourceUrl(dataset),\r\n        });\r\n    }\r\n    catch (e) {\r\n        // Since a Solid server adds a `Link` header to an ACL even if that ACL does not exist,\r\n        // failure to fetch the ACL is expected to happen - we just return `null` and let callers deal\r\n        // with it.\r\n        return null;\r\n    }\r\n}\r\n/** @internal */\r\nasync function internal_fetchFallbackAcl(resource, options = internal_defaultFetchOptions) {\r\n    const resourceUrl = new URL(getSourceUrl(resource));\r\n    const resourcePath = resourceUrl.pathname;\r\n    // Note: we're currently assuming that the Origin is the root of the Pod. However, it is not yet\r\n    //       set in stone that that will always be the case. We might need to check the Container's\r\n    //       metadata at some point in time to check whether it is actually the root of the Pod.\r\n    //       See: https://github.com/solid/specification/issues/153#issuecomment-624630022\r\n    if (resourcePath === \"/\") {\r\n        // We're already at the root, so there's no Container we can retrieve:\r\n        return null;\r\n    }\r\n    const containerPath = internal_getContainerPath(resourcePath);\r\n    const containerIri = new URL(containerPath, resourceUrl.origin).href;\r\n    const containerInfo = await getResourceInfo(containerIri, options);\r\n    if (!hasAccessibleAcl(containerInfo)) {\r\n        // If the current user does not have access to this Container's ACL,\r\n        // we cannot determine whether its ACL is the one that applies. Thus, return null:\r\n        return null;\r\n    }\r\n    const containerAcl = await internal_fetchResourceAcl(containerInfo, options);\r\n    if (containerAcl === null) {\r\n        return internal_fetchFallbackAcl(containerInfo, options);\r\n    }\r\n    return containerAcl;\r\n}\r\n/**\r\n * Given the path to a Resource, get the URL of the Container one level up in the hierarchy.\r\n * @param resourcePath The path of the Resource of which we need to determine the Container's path.\r\n * @hidden For internal use only.\r\n */\r\nfunction internal_getContainerPath(resourcePath) {\r\n    const resourcePathWithoutTrailingSlash = resourcePath.substring(resourcePath.length - 1) === \"/\"\r\n        ? resourcePath.substring(0, resourcePath.length - 1)\r\n        : resourcePath;\r\n    const containerPath = resourcePath.substring(0, resourcePathWithoutTrailingSlash.lastIndexOf(\"/\")) + \"/\";\r\n    return containerPath;\r\n}\r\n/** @internal */\r\nfunction internal_getAclRules(aclDataset) {\r\n    const things = getThingAll(aclDataset);\r\n    return things.filter(isAclRule);\r\n}\r\nfunction isAclRule(thing) {\r\n    return getIriAll(thing, rdf.type).includes(acl.Authorization);\r\n}\r\n/** @internal */\r\nfunction internal_getResourceAclRulesForResource(aclRules, resource) {\r\n    return aclRules.filter((rule) => appliesToResource(rule, resource));\r\n}\r\nfunction appliesToResource(aclRule, resource) {\r\n    return getIriAll(aclRule, acl.accessTo).includes(resource);\r\n}\r\n/** @internal */\r\nfunction internal_getDefaultAclRulesForResource(aclRules, resource) {\r\n    return aclRules.filter((rule) => isDefaultForResource(rule, resource));\r\n}\r\nfunction isDefaultForResource(aclRule, resource) {\r\n    return (getIriAll(aclRule, acl.default).includes(resource) ||\r\n        getIriAll(aclRule, acl.defaultForNew).includes(resource));\r\n}\r\n/** @internal */\r\nfunction internal_getAccess(rule) {\r\n    const ruleAccessModes = getIriAll(rule, acl.mode);\r\n    const writeAccess = ruleAccessModes.includes(internal_accessModeIriStrings.write);\r\n    return writeAccess\r\n        ? {\r\n            read: ruleAccessModes.includes(internal_accessModeIriStrings.read),\r\n            append: true,\r\n            write: true,\r\n            control: ruleAccessModes.includes(internal_accessModeIriStrings.control),\r\n        }\r\n        : {\r\n            read: ruleAccessModes.includes(internal_accessModeIriStrings.read),\r\n            append: ruleAccessModes.includes(internal_accessModeIriStrings.append),\r\n            write: false,\r\n            control: ruleAccessModes.includes(internal_accessModeIriStrings.control),\r\n        };\r\n}\r\n/** @internal */\r\nfunction internal_combineAccessModes(modes) {\r\n    return modes.reduce((accumulator, current) => {\r\n        const writeAccess = accumulator.write || current.write;\r\n        return writeAccess\r\n            ? {\r\n                read: accumulator.read || current.read,\r\n                append: true,\r\n                write: true,\r\n                control: accumulator.control || current.control,\r\n            }\r\n            : {\r\n                read: accumulator.read || current.read,\r\n                append: accumulator.append || current.append,\r\n                write: false,\r\n                control: accumulator.control || current.control,\r\n            };\r\n    }, { read: false, append: false, write: false, control: false });\r\n}\r\n/** @internal */\r\nfunction internal_removeEmptyAclRules(aclDataset) {\r\n    const aclRules = internal_getAclRules(aclDataset);\r\n    const aclRulesToRemove = aclRules.filter(isEmptyAclRule);\r\n    // Is this too clever? It iterates over aclRulesToRemove, one by one removing them from aclDataset.\r\n    const updatedAclDataset = aclRulesToRemove.reduce(removeThing, aclDataset);\r\n    return updatedAclDataset;\r\n}\r\nfunction isEmptyAclRule(aclRule) {\r\n    // If there are Quads in there unrelated to Access Control,\r\n    // this is not an empty ACL rule that can be deleted:\r\n    if (Array.from(aclRule).some((quad) => !isAclQuad(quad))) {\r\n        return false;\r\n    }\r\n    // If the rule does not apply to any Resource, it is no longer working:\r\n    if (getIri(aclRule, acl.accessTo) === null &&\r\n        getIri(aclRule, acl.default) === null &&\r\n        getIri(aclRule, acl.defaultForNew) === null) {\r\n        return true;\r\n    }\r\n    // If the rule does not specify Access Modes, it is no longer working:\r\n    if (getIri(aclRule, acl.mode) === null) {\r\n        return true;\r\n    }\r\n    // If the rule does not specify whom it applies to, it is no longer working:\r\n    if (getIri(aclRule, acl.agent) === null &&\r\n        getIri(aclRule, acl.agentGroup) === null &&\r\n        getIri(aclRule, acl.agentClass) === null) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isAclQuad(quad) {\r\n    const predicate = quad.predicate;\r\n    const object = quad.object;\r\n    if (predicate.equals(DataFactory.namedNode(rdf.type)) &&\r\n        object.equals(DataFactory.namedNode(acl.Authorization))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.accessTo)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.default)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.defaultForNew))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.mode)) &&\r\n        Object.values(internal_accessModeIriStrings).some((mode) => object.equals(DataFactory.namedNode(mode)))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.agent)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.agentGroup)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.agentClass))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.origin))) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * IRIs of potential Access Modes\r\n * @internal\r\n */\r\nconst internal_accessModeIriStrings = {\r\n    read: \"http://www.w3.org/ns/auth/acl#Read\",\r\n    append: \"http://www.w3.org/ns/auth/acl#Append\",\r\n    write: \"http://www.w3.org/ns/auth/acl#Write\",\r\n    control: \"http://www.w3.org/ns/auth/acl#Control\",\r\n};\r\n/** @internal\r\n * This function finds, among a set of ACL rules, the ones granting access to a given entity (the target)\r\n * and identifying it with a specific property (`acl:agent` or `acl:agentGroup`).\r\n * @param aclRules The set of rules to filter\r\n * @param targetIri The IRI of the target\r\n * @param targetType The property linking the rule to the target\r\n */\r\nfunction internal_getAclRulesForIri(aclRules, targetIri, targetType) {\r\n    return aclRules.filter((rule) => getIriAll(rule, targetType).includes(targetIri));\r\n}\r\n/** @internal\r\n * This function transforms a given set of rules into a map associating the IRIs\r\n * of the entities to which permissions are granted by these rules, and the permissions\r\n * granted to them. Additionally, it filters these entities based on the predicate\r\n * that refers to them in the rule.\r\n */\r\nfunction internal_getAccessByIri(aclRules, targetType) {\r\n    const targetIriAccess = {};\r\n    aclRules.forEach((rule) => {\r\n        const ruleTargetIri = getIriAll(rule, targetType);\r\n        const access = internal_getAccess(rule);\r\n        // A rule might apply to multiple agents. If multiple rules apply to the same agent, the Access\r\n        // Modes granted by those rules should be combined:\r\n        ruleTargetIri.forEach((targetIri) => {\r\n            targetIriAccess[targetIri] =\r\n                typeof targetIriAccess[targetIri] === \"undefined\"\r\n                    ? access\r\n                    : internal_combineAccessModes([targetIriAccess[targetIri], access]);\r\n        });\r\n    });\r\n    return targetIriAccess;\r\n}\r\n/**\r\n * Initialises a new ACL Rule that grants some access - but does not yet specify to whom.\r\n *\r\n * @hidden This is an internal utility function that should not be used directly by downstreams.\r\n * @param access Access mode that this Rule will grant\r\n */\r\nfunction internal_initialiseAclRule(access) {\r\n    let newRule = createThing();\r\n    newRule = setIri(newRule, rdf.type, acl.Authorization);\r\n    if (access.read) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.read);\r\n    }\r\n    if (access.append && !access.write) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.append);\r\n    }\r\n    if (access.write) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.write);\r\n    }\r\n    if (access.control) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.control);\r\n    }\r\n    return newRule;\r\n}\r\n/**\r\n * Creates a new ACL Rule with the same ACL values as the input ACL Rule, but having a different IRI.\r\n *\r\n * Note that non-ACL values will not be copied over.\r\n *\r\n * @hidden This is an internal utility function that should not be used directly by downstreams.\r\n * @param sourceRule ACL rule to duplicate.\r\n */\r\nfunction internal_duplicateAclRule(sourceRule) {\r\n    let targetRule = createThing();\r\n    targetRule = setIri(targetRule, rdf.type, acl.Authorization);\r\n    function copyIris(inputRule, outputRule, predicate) {\r\n        return getIriAll(inputRule, predicate).reduce((outputRule, iriTarget) => addIri(outputRule, predicate, iriTarget), outputRule);\r\n    }\r\n    targetRule = copyIris(sourceRule, targetRule, acl.accessTo);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.default);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.defaultForNew);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.agent);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.agentGroup);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.agentClass);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.origin);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.mode);\r\n    return targetRule;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Verify whether a given SolidDataset was fetched together with its Access Control List.\r\n *\r\n * @param dataset A [[SolidDataset]] that may have its ACLs attached.\r\n * @returns True if `dataset` was fetched together with its ACLs.\r\n */\r\nfunction hasAcl(dataset) {\r\n    const potentialAcl = dataset;\r\n    return typeof potentialAcl.internal_acl === \"object\";\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Verifies whether the given Resource has a resource ACL (Access Control List) attached.\r\n *\r\n * The [[hasResourceAcl]] function checks that:\r\n * - a given Resource has a resource ACL attached, and\r\n * - the user calling [[hasResourceAcl]] has Control access to the Resource.\r\n *\r\n * To retrieve a Resource with its ACLs, see [[getSolidDatasetWithAcl]].\r\n *\r\n * @param resource A Resource that might have an ACL attached.\r\n * @returns `true` if the Resource has a resource ACL attached that is accessible by the user.\r\n */\r\nfunction hasResourceAcl(resource) {\r\n    return (resource.internal_acl.resourceAcl !== null &&\r\n        getSourceUrl(resource) ===\r\n            resource.internal_acl.resourceAcl.internal_accessTo &&\r\n        resource.internal_resourceInfo.aclUrl ===\r\n            getSourceUrl(resource.internal_acl.resourceAcl));\r\n}\r\n/**\r\n * Experimental: fetch a SolidDataset and its associated Access Control List.\r\n *\r\n * This is an experimental function that fetches both a Resource, the linked ACL Resource (if\r\n * available), and the ACL that applies to it if the linked ACL Resource is not available. This can\r\n * result in many HTTP requests being executed, in lieu of the Solid spec mandating servers to\r\n * provide this info in a single request. Therefore, and because this function is still\r\n * experimental, prefer [[getSolidDataset]] instead.\r\n *\r\n * If the Resource does not advertise the ACL Resource (because the authenticated user does not have\r\n * access to it), the `acl` property in the returned value will be null. `acl.resourceAcl` will be\r\n * undefined if the Resource's linked ACL Resource could not be fetched (because it does not exist),\r\n * and `acl.fallbackAcl` will be null if the applicable Container's ACL is not accessible to the\r\n * authenticated user.\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A SolidDataset and the ACLs that apply to it, if available to the authenticated user.\r\n */\r\nasync function getSolidDatasetWithAcl(url, options = internal_defaultFetchOptions) {\r\n    const solidDataset = await getSolidDataset(url, options);\r\n    const acl = await internal_fetchAcl(solidDataset, options);\r\n    return Object.assign(solidDataset, { internal_acl: acl });\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Retrieves a file, its resource ACL (Access Control List) if available,\r\n * and its fallback ACL from a URL and returns them as a blob.\r\n *\r\n * If the user calling the function does not have access to the file's resource ACL,\r\n * [[hasAccessibleAcl]] on the returned blob returns false.\r\n * If the user has access to the file's resource ACL but the resource ACL does not exist,\r\n * [[getResourceAcl]] on the returned blob returns null.\r\n * If the fallback ACL is inaccessible by the user,\r\n * [[getFallbackAcl]] on the returned blob returns null.\r\n *\r\n * ```{tip}\r\n * To retrieve the ACLs, the function results in multiple HTTP requests rather than a single\r\n * request as mandated by the Solid spec. As such, prefer [[getFile]] instead if you do not need the ACL.\r\n * ```\r\n *\r\n * @param url The URL of the fetched file\r\n * @param options Fetching options: a custom fetcher and/or headers.\r\n * @returns A file and its ACLs, if available to the authenticated user, as a blob.\r\n * @since 0.2.0\r\n */\r\nasync function getFileWithAcl(input, options = internal_defaultFetchOptions) {\r\n    const file = await getFile(input, options);\r\n    const acl = await internal_fetchAcl(file, options);\r\n    return Object.assign(file, { internal_acl: acl });\r\n}\r\n/**\r\n * Experimental: fetch a Resource's metadata and its associated Access Control List.\r\n *\r\n * This is an experimental function that fetches both a Resource's metadata, the linked ACL Resource (if\r\n * available), and the ACL that applies to it if the linked ACL Resource is not available (if accessible). This can\r\n * result in many HTTP requests being executed, in lieu of the Solid spec mandating servers to\r\n * provide this info in a single request.\r\n *\r\n * If the Resource's linked ACL Resource could not be fetched (because it does not exist, or because\r\n * the authenticated user does not have access to it), `acl.resourceAcl` will be `null`. If the\r\n * applicable Container's ACL is not accessible to the authenticated user, `acl.fallbackAcl` will be\r\n * `null`.\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Resource's metadata and the ACLs that apply to the Resource, if available to the authenticated user.\r\n */\r\nasync function getResourceInfoWithAcl(url, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfo(url, options);\r\n    const acl = await internal_fetchAcl(resourceInfo, options);\r\n    return Object.assign(resourceInfo, { internal_acl: acl });\r\n}\r\nfunction getResourceAcl(resource) {\r\n    if (!hasResourceAcl(resource)) {\r\n        return null;\r\n    }\r\n    return resource.internal_acl.resourceAcl;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Verifies whether the given Resource has a fallback ACL (Access Control List) attached.\r\n *\r\n * A fallback ACL for a Resource is inherited from the Resource's parent Container\r\n * (or another of its ancestor Containers) and applies if the Resource does\r\n * not have its own resource ACL.\r\n *\r\n * The [[hasFallbackAcl]] function checks that:\r\n * - a given Resource has a fallback ACL attached, and\r\n * - the user calling [[hasFallbackAcl]] has Control access to the Container\r\n * from which the Resource inherits its ACL.\r\n *\r\n * To retrieve a Resource with its ACLs, see [[getSolidDatasetWithAcl]].\r\n *\r\n * @param resource A [[SolidDataset]] that might have a fallback ACL attached.\r\n *\r\n * @returns `true` if the Resource has a fallback ACL attached that is accessible to the user.\r\n */\r\nfunction hasFallbackAcl(resource) {\r\n    return resource.internal_acl.fallbackAcl !== null;\r\n}\r\nfunction getFallbackAcl(dataset) {\r\n    if (!hasFallbackAcl(dataset)) {\r\n        return null;\r\n    }\r\n    return dataset.internal_acl.fallbackAcl;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Creates an empty resource ACL (Access Control List) for a given Resource.\r\n *\r\n * @param targetResource A Resource that does not have its own ACL yet (see [[hasResourceAcl]]).\r\n * @returns An empty resource ACL for the given Resource.\r\n */\r\nfunction createAcl(targetResource) {\r\n    const emptyResourceAcl = Object.assign(dataset(), {\r\n        internal_accessTo: getSourceUrl(targetResource),\r\n        internal_resourceInfo: {\r\n            sourceIri: targetResource.internal_resourceInfo.aclUrl,\r\n            isRawData: false,\r\n            linkedResources: {},\r\n        },\r\n    });\r\n    return emptyResourceAcl;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Creates a resource ACL (Access Control List), initialised from the fallback ACL\r\n * inherited from the given Resource's Container (or another of its ancestor Containers).\r\n * That is, the new ACL has the same rules/entries as the fallback ACL that currently\r\n * applies to the Resource.\r\n *\r\n * @param resource A Resource without its own resource ACL (see [[hasResourceAcl]]) but with an accessible fallback ACL (see [[hasFallbackAcl]]).\r\n * @returns A resource ACL initialised with the rules/entries from the Resource's fallback ACL.\r\n */\r\nfunction createAclFromFallbackAcl(resource) {\r\n    const emptyResourceAcl = createAcl(resource);\r\n    const fallbackAclRules = internal_getAclRules(resource.internal_acl.fallbackAcl);\r\n    const defaultAclRules = internal_getDefaultAclRulesForResource(fallbackAclRules, resource.internal_acl.fallbackAcl.internal_accessTo);\r\n    const newAclRules = defaultAclRules.map((rule) => {\r\n        rule = removeAll(rule, acl.default);\r\n        rule = removeAll(rule, acl.defaultForNew);\r\n        rule = setIri(rule, acl.accessTo, getSourceUrl(resource));\r\n        rule = setIri(rule, acl.default, getSourceUrl(resource));\r\n        return rule;\r\n    });\r\n    // Iterate over every ACL Rule we want to import, inserting them into `emptyResourceAcl` one by one:\r\n    const initialisedResourceAcl = newAclRules.reduce(setThing, emptyResourceAcl);\r\n    return initialisedResourceAcl;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Saves the resource ACL for a Resource.\r\n *\r\n * @param resource The Resource to which the given resource ACL applies.\r\n * @param resourceAcl An [[AclDataset]] whose ACL Rules will apply to `resource`.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n */\r\nasync function saveAclFor(resource, resourceAcl, options = internal_defaultFetchOptions) {\r\n    if (!hasAccessibleAcl(resource)) {\r\n        throw new Error(`Could not determine the location of the ACL for the Resource at \\`${getSourceUrl(resource)}\\`; possibly the current user does not have Control access to that Resource. Try calling \\`hasAccessibleAcl()\\` before calling \\`saveAclFor()\\`.`);\r\n    }\r\n    const savedDataset = await saveSolidDatasetAt(resource.internal_resourceInfo.aclUrl, resourceAcl, options);\r\n    const savedAclDataset = Object.assign(savedDataset, {\r\n        internal_accessTo: getSourceUrl(resource),\r\n    });\r\n    return savedAclDataset;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes the resource ACL (Access Control List) from a Resource.\r\n *\r\n * Once the resource ACL is removed from the Resource, the Resource relies on the\r\n * fallback ACL inherited from the Resource's parent Container (or another of its ancestor Containers).\r\n *\r\n * @param resource The Resource for which you want to delete the ACL.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n */\r\nasync function deleteAclFor(resource, options = internal_defaultFetchOptions) {\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const response = await config.fetch(resource.internal_resourceInfo.aclUrl, {\r\n        method: \"DELETE\",\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(`Deleting the ACL of the Resource at \\`${getSourceUrl(resource)}\\` failed: \\`${response.status}\\` \\`${response.statusText}\\`.`);\r\n    }\r\n    const storedResource = Object.assign(internal_cloneResource(resource), {\r\n        acl: {\r\n            resourceAcl: null,\r\n        },\r\n    });\r\n    return storedResource;\r\n}\r\n/**\r\n * Given a [[SolidDataset]], verify whether its Access Control List is accessible to the current user.\r\n *\r\n * This should generally only be true for SolidDatasets fetched by\r\n * [[getSolidDatasetWithAcl]].\r\n *\r\n * Please note that the Web Access Control specification is not yet finalised, and hence, this\r\n * function is still experimental and can change in a non-major release.\r\n *\r\n * @param dataset A [[SolidDataset]].\r\n * @returns Whether the given `dataset` has a an ACL that is accessible to the current user.\r\n */\r\nfunction hasAccessibleAcl(dataset) {\r\n    return typeof dataset.internal_resourceInfo.aclUrl === \"string\";\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns an Agent's explicitly-granted Access Modes for the given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to the Agent through other\r\n * ACL rules, e.g., public or group-specific permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Agent may have been granted access.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes that have been explicitly granted to the Agent for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control access to a given Resource or its Container).\r\n */\r\nfunction getAgentAccess(resourceInfo, agent) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        return getAgentResourceAccess(resourceInfo.internal_acl.resourceAcl, agent);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        return getAgentDefaultAccess(resourceInfo.internal_acl.fallbackAcl, agent);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Returns all explicitly-granted Access Modes per Agent for the given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to Agents through other\r\n * ACL rules, e.g., public or group-specific permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which Agents may have been granted access.\r\n * @returns Access Modes per Agent that have been explicitly granted for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control access to a given Resource or its Container).\r\n */\r\nfunction getAgentAccessAll(resourceInfo) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        const resourceAcl = getResourceAcl(resourceInfo);\r\n        return getAgentResourceAccessAll(resourceAcl);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        const fallbackAcl = getFallbackAcl(resourceInfo);\r\n        return getAgentDefaultAccessAll(fallbackAcl);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes explicitly granted to an Agent for the Resource\r\n * associated with an ACL (Access ControlList).\r\n *\r\n * The function does not return:\r\n *\r\n * - Access Modes granted indirectly to the Agent through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to the Agent for the child Resources if the associated Resource is a Container (see [[getAgentDefaultAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains ACL rules.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes that have been explicitly granted to an Agent for the Resource associated with an ACL SolidDataset.\r\n */\r\nfunction getAgentResourceAccess(aclDataset, agent) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRulesForAgent(resourceRules, agent);\r\n    const agentAccessModes = agentResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(agentAccessModes);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the explicitly granted Access Modes per Agent for the Resource associated\r\n * with an ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n *\r\n * - Access Modes granted indirectly to Agents through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to Agents for the child Resources if the associated Resource is a Container.\r\n *\r\n * @param aclDataset The SolidDataset that contains ACL rules.\r\n * @returns Access Modes per Agent that have been explicitly granted for the Resource associated with an ACL SolidDataset.\r\n */\r\nfunction getAgentResourceAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRules(resourceRules);\r\n    return getAccessByAgent(agentResourceRules);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Agent.\r\n * Specifically, the function returns a new resource ACL initialised with the given ACL and\r\n * new rules for the Agent's access.\r\n *\r\n * If rules for Agent's access already exist in the given ACL, in the returned ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n *\r\n * - Access Modes granted indirectly to Agents through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to Agents for the child Resources if the associated Resource is a Container.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param agent The Agent to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Agent for the Resource.\r\n * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `agent`.\r\n */\r\nfunction setAgentResourceAccess(aclDataset, agent, access) {\r\n    // First make sure that none of the pre-existing rules in the given ACL SolidDataset\r\n    // give the Agent access to the Resource:\r\n    let filteredAcl = aclDataset;\r\n    getThingAll(aclDataset).forEach((aclRule) => {\r\n        // Obtain both the Rule that no longer includes the given Agent,\r\n        // and a new Rule that includes all ACL Quads\r\n        // that do not pertain to the given Agent-Resource combination.\r\n        // Note that usually, the latter will no longer include any meaningful statements;\r\n        // we'll clean them up afterwards.\r\n        const [filteredRule, remainingRule] = removeAgentFromRule(aclRule, agent, aclDataset.internal_accessTo, \"resource\");\r\n        filteredAcl = setThing(filteredAcl, filteredRule);\r\n        filteredAcl = setThing(filteredAcl, remainingRule);\r\n    });\r\n    // Create a new Rule that only grants the given Agent the given Access Modes:\r\n    let newRule = internal_initialiseAclRule(access);\r\n    newRule = setIri(newRule, acl.accessTo, aclDataset.internal_accessTo);\r\n    newRule = setIri(newRule, acl.agent, agent);\r\n    const updatedAcl = setThing(filteredAcl, newRule);\r\n    // Remove any remaining Rules that do not contain any meaningful statements:\r\n    const cleanedAcl = internal_removeEmptyAclRules(updatedAcl);\r\n    return cleanedAcl;\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns an Agent's Access Modes explicitly granted for the children of the\r\n * Container associated with the given ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Agent through other ACL rules, e.g. public or group-specific permissions.\r\n * - Access Modes granted to the Agent for the Container Resource itself (see [[getAgentResourceAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules for a certain Container.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Container's children.\r\n * @returns Access Modes that have been explicitly granted to an Agent for the children of the Container associated with the given ACL.\r\n */\r\nfunction getAgentDefaultAccess(aclDataset, agent) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRulesForAgent(resourceRules, agent);\r\n    const agentAccessModes = agentResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(agentAccessModes);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes, per Agent, that have been explicitly granted for the children\r\n * of the Container associated with the given ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n *\r\n * - Access Modes granted indirectly to the Agents through other ACL rules, e.g. public or group-specific permissions.\r\n * - Access Modes granted to the Agents for the Container Resource itself (see [[getAgentResourceAccessAll]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @returns Access Modes, per Agent, that have been explicitly granted for the children of the Container associated with the given ACL.\r\n */\r\nfunction getAgentDefaultAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRules(resourceRules);\r\n    return getAccessByAgent(agentResourceRules);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the default ACL (Access Control List) to set an Agent's Access Modes for the Container's children.\r\n * Specifically, the function returns a new default ACL initialised with the given ACL and\r\n * new rules for the Agent's access.\r\n *\r\n * If rules already exist for the Agent in the given ACL, in the returned ACL, they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted indirectly to the Agent through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to the Agent for the Container Resource itself.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param agent The Agent to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Agent.\r\n * @returns A new default ACL initialised with the given `aclDataset` and `access` for the `agent`.\r\n */\r\nfunction setAgentDefaultAccess(aclDataset, agent, access) {\r\n    // First make sure that none of the pre-existing rules in the given ACL SolidDataset\r\n    // give the Agent default access to the Resource:\r\n    let filteredAcl = aclDataset;\r\n    getThingAll(aclDataset).forEach((aclRule) => {\r\n        // Obtain both the Rule that no longer includes the given Agent,\r\n        // and a new Rule that includes all ACL Quads\r\n        // that do not pertain to the given Agent-Resource default combination.\r\n        // Note that usually, the latter will no longer include any meaningful statements;\r\n        // we'll clean them up afterwards.\r\n        const [filteredRule, remainingRule] = removeAgentFromRule(aclRule, agent, aclDataset.internal_accessTo, \"default\");\r\n        filteredAcl = setThing(filteredAcl, filteredRule);\r\n        filteredAcl = setThing(filteredAcl, remainingRule);\r\n    });\r\n    // Create a new Rule that only grants the given Agent the given default Access Modes:\r\n    let newRule = internal_initialiseAclRule(access);\r\n    newRule = setIri(newRule, acl.default, aclDataset.internal_accessTo);\r\n    newRule = setIri(newRule, acl.agent, agent);\r\n    const updatedAcl = setThing(filteredAcl, newRule);\r\n    // Remove any remaining Rules that do not contain any meaningful statements:\r\n    const cleanedAcl = internal_removeEmptyAclRules(updatedAcl);\r\n    return cleanedAcl;\r\n}\r\nfunction getAgentAclRulesForAgent(aclRules, agent) {\r\n    return internal_getAclRulesForIri(aclRules, agent, acl.agent);\r\n}\r\nfunction getAgentAclRules(aclRules) {\r\n    return aclRules.filter(isAgentAclRule);\r\n}\r\nfunction isAgentAclRule(aclRule) {\r\n    return getIri(aclRule, acl.agent) !== null;\r\n}\r\n/**\r\n * Given an ACL Rule, returns two new ACL Rules that cover all the input Rule's use cases,\r\n * except for giving the given Agent access to the given Resource.\r\n *\r\n * @param rule The ACL Rule that should no longer apply for a given Agent to a given Resource.\r\n * @param agent The Agent that should be removed from the Rule for the given Resource.\r\n * @param resourceIri The Resource to which the Rule should no longer apply for the given Agent.\r\n * @returns A tuple with the original ACL Rule without the given Agent, and a new ACL Rule for the given Agent for the remaining Resources, respectively.\r\n */\r\nfunction removeAgentFromRule(rule, agent, resourceIri, ruleType) {\r\n    // If the existing Rule does not apply to the given Agent, we don't need to split up.\r\n    // Without this check, we'd be creating a new rule for the given Agent (ruleForOtherTargets)\r\n    // that would give it access it does not currently have:\r\n    if (!getIriAll(rule, acl.agent).includes(agent)) {\r\n        const emptyRule = internal_initialiseAclRule({\r\n            read: false,\r\n            append: false,\r\n            write: false,\r\n            control: false,\r\n        });\r\n        return [rule, emptyRule];\r\n    }\r\n    // The existing rule will keep applying to Agents other than the given one:\r\n    const ruleWithoutAgent = removeIri(rule, acl.agent, agent);\r\n    // The agent might have been given other access in the existing rule, so duplicate it...\r\n    let ruleForOtherTargets = internal_duplicateAclRule(rule);\r\n    // ...but remove access to the original Resource...\r\n    ruleForOtherTargets = removeIri(ruleForOtherTargets, ruleType === \"resource\" ? acl.accessTo : acl.default, resourceIri);\r\n    // Prevents the legacy predicate 'acl:defaultForNew' to lead to privilege escalation\r\n    if (ruleType === \"default\") {\r\n        ruleForOtherTargets = removeIri(ruleForOtherTargets, acl.defaultForNew, resourceIri);\r\n    }\r\n    // ...and only apply the new Rule to the given Agent (because the existing Rule covers the others):\r\n    ruleForOtherTargets = setIri(ruleForOtherTargets, acl.agent, agent);\r\n    ruleForOtherTargets = removeAll(ruleForOtherTargets, acl.agentClass);\r\n    ruleForOtherTargets = removeAll(ruleForOtherTargets, acl.agentGroup);\r\n    ruleForOtherTargets = removeAll(ruleForOtherTargets, acl.origin);\r\n    return [ruleWithoutAgent, ruleForOtherTargets];\r\n}\r\nfunction getAccessByAgent(aclRules) {\r\n    return internal_getAccessByIri(aclRules, acl.agent);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Returns a Group's explicity-granted Access Modes for a given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to the Group through other\r\n * ACL rules, e.g., public permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Group may have been granted access.\r\n * @param group URL of the Group for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes that have been explicitly granted to the `group` for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\r\nfunction getGroupAccess(resourceInfo, group) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        return getGroupResourceAccess(resourceInfo.internal_acl.resourceAcl, group);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        return getGroupDefaultAccess(resourceInfo.internal_acl.fallbackAcl, group);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns all explicitly-granted Access Modes per Group for the given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to the Group through other\r\n * ACL rules, e.g., public permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Group may have been granted access.\r\n * @returns Access Modes per Group that have been explicitly granted for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\r\nfunction getGroupAccessAll(resourceInfo) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        const resourceAcl = getResourceAcl(resourceInfo);\r\n        return getGroupResourceAccessAll(resourceAcl);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        const fallbackAcl = getFallbackAcl(resourceInfo);\r\n        return getGroupDefaultAccessAll(fallbackAcl);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes explicitly granted to a Group for the Resource\r\n * associated with an ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public permissions.\r\n * - Access Modes granted to the Group for the child Resources if the associated Resource is a Container\r\n *   (see [[getGroupDefaultAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @param group URL of the Group for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes explicitly granted to a Group for the Resource associated with an ACL.\r\n */\r\nfunction getGroupResourceAccess(aclDataset, group) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const groupResourceRules = getGroupAclRuleForGroup(resourceRules, group);\r\n    const groupAccessModes = groupResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(groupAccessModes);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the explicitly granted Access Modes per Group for the Resource associated\r\n * with an ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public permissions.\r\n * - Access Modes granted to Groups for the child Resources if the associated Resource is a Container.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @returns Access Modes per Group that have been explicitly granted for the Resource associated with an ACL.\r\n */\r\nfunction getGroupResourceAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    return getAccessByGroup(resourceRules);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns a Group's Access Modes explicitly granted for the children of the\r\n * Container associated with an ACL (Access ControlList).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g. public permissions.\r\n * - Access Modes granted to the Group for the Container Resource itself (see [[getGroupResourceAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains ACL rules for a certain Container.\r\n * @param group URL of the Group for which to retrieve what access it has to the child Resources of the given Container.\r\n * @returns Access Modes that have been explicitly granted to the Group for the children of the Container associated with the given ACL.\r\n */\r\nfunction getGroupDefaultAccess(aclDataset, group) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const defaultRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const groupDefaultRules = getGroupAclRuleForGroup(defaultRules, group);\r\n    const groupAccessModes = groupDefaultRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(groupAccessModes);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes, per Group, that have been explicitly granted for the children\r\n * of the Container associated with the given ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Groups through other ACL rules, e.g. public permissions.\r\n * - Access Modes granted to the Groups for the Container Resource itself (see [[getGroupResourceAccessAll]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules for a certain Container.\r\n * @returns Access Modes per Group that have been explicitly granted for the children of the Container associated with the given ACL SolidDataset.\r\n */\r\nfunction getGroupDefaultAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const defaultRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    return getAccessByGroup(defaultRules);\r\n}\r\nfunction getGroupAclRuleForGroup(rules, group) {\r\n    return internal_getAclRulesForIri(rules, group, acl.agentGroup);\r\n}\r\nfunction getAccessByGroup(aclRules) {\r\n    return internal_getAccessByIri(aclRules, acl.agentGroup);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes granted to the public in general for a Resource.\r\n *\r\n * This function does not return Access Modes granted to specific Agents\r\n * through other ACL (Access Control List) rules, e.g., agent- or group-specific permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Agent may have been granted access.\r\n * @returns Access Modes granted to the public in general for the Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\r\nfunction getPublicAccess(resourceInfo) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        return getPublicResourceAccess(resourceInfo.internal_acl.resourceAcl);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        return getPublicDefaultAccess(resourceInfo.internal_acl.fallbackAcl);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes granted to the public in general for the Resource\r\n * associated with an ACL (Access Control List).\r\n *\r\n * This function does not return:\r\n * - Access Modes granted to specific Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to child Resources if the associated Resource is a Container (see [[getPublicDefaultAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @returns Access Modes granted to the public in general for the Resource associated with the `aclDataset`.\r\n */\r\nfunction getPublicResourceAccess(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const publicResourceRules = getClassAclRulesForClass(resourceRules, foaf.Agent);\r\n    const publicAccessModes = publicResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(publicAccessModes);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes granted to the public in general for the child Resources\r\n * of the Container associated with an ACL (Access Control List).\r\n *\r\n * This function does not return:\r\n * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to the Container Resource itself (see [[getPublicResourceAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules for a certain Container.\r\n * @returns Access Modes granted to the public in general for the children of the Container associated with the given `aclDataset`.\r\n */\r\nfunction getPublicDefaultAccess(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const publicResourceRules = getClassAclRulesForClass(resourceRules, foaf.Agent);\r\n    const publicAccessModes = publicResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(publicAccessModes);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the resource ACL (Access Control List) to set the Access Modes for the public.\r\n * Specifically, the function returns a new resource ACL (Access Control List) initialised\r\n * with the given resource ACL and new rules for the given public access.\r\n *\r\n * If rules for public access already exist in the given ACL, in the *returned* ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to child Resources if the associated Resource is a Container.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @param access The Access Modes to grant to the public.\r\n * @returns A new resource ACL initialised with the given `aclDataset` and public `access`.\r\n */\r\nfunction setPublicResourceAccess(aclDataset, access) {\r\n    // First make sure that none of the pre-existing rules in the given ACL SolidDataset\r\n    // give the public access to the Resource:\r\n    let filteredAcl = aclDataset;\r\n    getThingAll(aclDataset).forEach((aclRule) => {\r\n        // Obtain both the Rule that no longer includes the public,\r\n        // and a new Rule that includes all ACL Quads\r\n        // that do not pertain to the given Public-Resource combination.\r\n        // Note that usually, the latter will no longer include any meaningful statements;\r\n        // we'll clean them up afterwards.\r\n        const [filteredRule, remainingRule] = removePublicFromRule(aclRule, aclDataset.internal_accessTo, \"resource\");\r\n        filteredAcl = setThing(filteredAcl, filteredRule);\r\n        filteredAcl = setThing(filteredAcl, remainingRule);\r\n    });\r\n    // Create a new Rule that only grants the public the given Access Modes:\r\n    let newRule = internal_initialiseAclRule(access);\r\n    newRule = setIri(newRule, acl.accessTo, aclDataset.internal_accessTo);\r\n    newRule = setIri(newRule, acl.agentClass, foaf.Agent);\r\n    const updatedAcl = setThing(filteredAcl, newRule);\r\n    // Remove any remaining Rules that do not contain any meaningful statements:\r\n    return internal_removeEmptyAclRules(updatedAcl);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the default ACL (Access Control List) to set the public's default Access Modes\r\n * to child resources. Specifically, the function returns a new default ACL initialised\r\n * with the given default ACL and new rules for the given public access.\r\n *\r\n * If rules for public access already exist in the given ACL, in the *returned* ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to Container Resource itself.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @param access The Access Modes to grant to the public.\r\n * @returns A new default ACL initialised with the given `aclDataset` and public `access`.\r\n */\r\nfunction setPublicDefaultAccess(aclDataset, access) {\r\n    // First make sure that none of the pre-existing rules in the given ACL SolidDataset\r\n    // give the public default access to the Resource:\r\n    let filteredAcl = aclDataset;\r\n    getThingAll(aclDataset).forEach((aclRule) => {\r\n        // Obtain both the Rule that no longer includes the public,\r\n        // and a new Rule that includes all ACL Quads\r\n        // that do not pertain to the given Public-Resource default combination.\r\n        // Note that usually, the latter will no longer include any meaningful statements;\r\n        // we'll clean them up afterwards.\r\n        const [filteredRule, remainingRule] = removePublicFromRule(aclRule, aclDataset.internal_accessTo, \"default\");\r\n        filteredAcl = setThing(filteredAcl, filteredRule);\r\n        filteredAcl = setThing(filteredAcl, remainingRule);\r\n    });\r\n    // Create a new Rule that only grants the public the given default Access Modes:\r\n    let newRule = internal_initialiseAclRule(access);\r\n    newRule = setIri(newRule, acl.default, aclDataset.internal_accessTo);\r\n    newRule = setIri(newRule, acl.agentClass, foaf.Agent);\r\n    const updatedAcl = setThing(filteredAcl, newRule);\r\n    // Remove any remaining Rules that do not contain any meaningful statements:\r\n    const cleanedAcl = internal_removeEmptyAclRules(updatedAcl);\r\n    return cleanedAcl;\r\n}\r\n/**\r\n * Given an ACL Rule, return two new ACL Rules that cover all the input Rule's use cases,\r\n * except for giving the public access to the given Resource.\r\n *\r\n * @param rule The ACL Rule that should no longer apply for the public to a given Resource.\r\n * @param resourceIri The Resource to which the Rule should no longer apply for the public.\r\n * @returns A tuple with the original ACL Rule sans the public, and a new ACL Rule for the public for the remaining Resources, respectively.\r\n */\r\nfunction removePublicFromRule(rule, resourceIri, ruleType) {\r\n    // If the existing Rule does not apply to the given Agent, we don't need to split up.\r\n    // Without this check, we'd be creating a new rule for the given Agent (ruleForOtherTargets)\r\n    // that would give it access it does not currently have:\r\n    if (!getIriAll(rule, acl.agentClass).includes(foaf.Agent)) {\r\n        const emptyRule = internal_initialiseAclRule({\r\n            read: false,\r\n            append: false,\r\n            write: false,\r\n            control: false,\r\n        });\r\n        return [rule, emptyRule];\r\n    }\r\n    // The existing rule will keep applying to other Agent Classes:\r\n    const ruleWithoutPublic = removeIri(rule, acl.agentClass, foaf.Agent);\r\n    // The public might have been given other access in the existing rule, so duplicate it...\r\n    let ruleForOtherTargets = internal_duplicateAclRule(rule);\r\n    // ...but remove access to the original Resource...\r\n    ruleForOtherTargets = removeIri(ruleForOtherTargets, ruleType === \"resource\" ? acl.accessTo : acl.default, resourceIri);\r\n    // Prevents the legacy predicate 'acl:defaultForNew' to lead to privilege escalation\r\n    if (ruleType === \"default\") {\r\n        ruleForOtherTargets = removeIri(ruleForOtherTargets, acl.defaultForNew, resourceIri);\r\n    }\r\n    // ...and only apply the new Rule to the Public (because the existing Rule covers other Agents):\r\n    ruleForOtherTargets = setIri(ruleForOtherTargets, acl.agentClass, foaf.Agent);\r\n    ruleForOtherTargets = removeAll(ruleForOtherTargets, acl.agent);\r\n    ruleForOtherTargets = removeAll(ruleForOtherTargets, acl.agentGroup);\r\n    ruleForOtherTargets = removeAll(ruleForOtherTargets, acl.origin);\r\n    return [ruleWithoutPublic, ruleForOtherTargets];\r\n}\r\nfunction getClassAclRulesForClass(aclRules, agentClass) {\r\n    return aclRules.filter((rule) => appliesToClass(rule, agentClass));\r\n}\r\nfunction appliesToClass(aclRule, agentClass) {\r\n    return getIriAll(aclRule, acl.agentClass).includes(agentClass);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests** that\r\n * require a [[SolidDataset]] with a resource ACL (Access Control List).\r\n * ```\r\n *\r\n * Initialises a new empty ACL and attaches it to a given [[SolidDataset]] for use\r\n * in **unit tests**; e.g., unit tests that call [[getResourceAcl]].\r\n *\r\n * @param resource The Resource to mock up with a new resource ACL.\r\n * @returns The input Resource with an empty resource ACL attached.\r\n * @since 0.2.0\r\n */\r\nfunction addMockResourceAclTo(resource) {\r\n    var _a;\r\n    const aclUrl = (_a = resource.internal_resourceInfo.aclUrl) !== null && _a !== void 0 ? _a : \"https://your.pod/mock-acl.ttl\";\r\n    const resourceWithAclUrl = Object.assign(internal_cloneResource(resource), {\r\n        internal_resourceInfo: Object.assign(Object.assign({}, resource.internal_resourceInfo), { aclUrl: aclUrl }),\r\n    });\r\n    const aclDataset = createAcl(resourceWithAclUrl);\r\n    const resourceWithResourceAcl = Object.assign(resourceWithAclUrl, {\r\n        internal_acl: {\r\n            resourceAcl: aclDataset,\r\n            fallbackAcl: null,\r\n        },\r\n    });\r\n    return resourceWithResourceAcl;\r\n}\r\n/**\r\n *\r\n * ```{warning}\r\n * Do not use this function in production code.  For use in **unit tests** that require a\r\n * [[SolidDataset]] with a fallback ACL (Access Control List).\r\n * ```\r\n *\r\n * Initialises a new empty fallback ACL and attaches it to a given [[SolidDataset]] for use\r\n * in **unit tests**; e.g., unit tests that call [[getFallbackAcl]].\r\n *\r\n * @param resource The Resource to mock up with new fallback ACL.\r\n * @returns The input Resource with an empty fallback ACL attached.\r\n * @since 0.2.0\r\n */\r\nfunction addMockFallbackAclTo(resource) {\r\n    const containerUrl = internal_getContainerPath(getSourceIri(resource));\r\n    const aclUrl = containerUrl + \".acl\";\r\n    const mockContainer = setMockAclUrl(mockContainerFrom(containerUrl), aclUrl);\r\n    const aclDataset = createAcl(mockContainer);\r\n    const resourceWithFallbackAcl = Object.assign(internal_cloneResource(resource), {\r\n        internal_acl: {\r\n            resourceAcl: null,\r\n            fallbackAcl: aclDataset,\r\n        },\r\n    });\r\n    return resourceWithFallbackAcl;\r\n}\r\nfunction setMockAclUrl(resource, aclUrl) {\r\n    const resourceWithAclUrl = Object.assign(internal_cloneResource(resource), {\r\n        internal_resourceInfo: Object.assign(Object.assign({}, resource.internal_resourceInfo), { aclUrl: aclUrl }),\r\n    });\r\n    return resourceWithAclUrl;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/** @hidden */\r\nfunction internal_getAcr(resource) {\r\n    if (!hasAccessibleAcr(resource)) {\r\n        throw new Error(`Cannot work with Access Controls on a Resource (${getSourceUrl(resource)}) that does not have an Access Control Resource.`);\r\n    }\r\n    return resource.internal_acp.acr;\r\n}\r\n/** @hidden */\r\nfunction internal_setAcr(resource, acr) {\r\n    return Object.assign(internal_cloneResource(resource), {\r\n        internal_acp: Object.assign(Object.assign({}, resource.internal_acp), { acr: acr }),\r\n    });\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new [[Control]].\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction internal_createControl(options) {\r\n    let control = createThing(options);\r\n    control = setIri(control, rdf.type, acp.AccessControl);\r\n    return control;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Find an [[Control]] with a given URL in a given Resource with an Access Control Resource.\r\n *\r\n * @returns The requested Access Control, or `null` if it could not be found.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction internal_getControl(withAccessControlResource, url, options) {\r\n    const acr = internal_getAcr(withAccessControlResource);\r\n    const foundThing = getThing(acr, url, options);\r\n    if (foundThing === null ||\r\n        !getIriAll(foundThing, rdf.type).includes(acp.AccessControl)) {\r\n        return null;\r\n    }\r\n    return foundThing;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all [[Control]]s in the Access Control Resource of a given Resource.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction internal_getControlAll(withAccessControlResource, options) {\r\n    const acr = internal_getAcr(withAccessControlResource);\r\n    const foundThings = getThingAll(acr, options);\r\n    return foundThings.filter((foundThing) => getIriAll(foundThing, rdf.type).includes(acp.AccessControl));\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert an [[Control]] into the [[AccessControlResource]] of a Resource, replacing previous\r\n * instances of that Access Control.\r\n *\r\n * @param withAccessControlResource A Resource with the Access Control Resource into which to insert an Access Control.\r\n * @param control The Control to insert into the Access Control Resource.\r\n * @returns The given Resource with a new Access Control Resource equal to the original Access Control Resource, but with the given Access Control.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction internal_setControl(withAccessControlResource, control) {\r\n    const acr = internal_getAcr(withAccessControlResource);\r\n    const updatedAcr = setThing(acr, control);\r\n    const updatedResource = internal_setAcr(withAccessControlResource, updatedAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an [[Control]] such that that Policy applies to the Resource to which\r\n * the [[Control]] is linked.\r\n *\r\n * @param accessControl The [[Control]] to which the Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given policy added to it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_addPolicyUrl(accessControl, policyUrl) {\r\n    return addIri(accessControl, acp.apply, policyUrl);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all Policies that apply to the Resource to which the given [[Control]] is linked, and\r\n * which can be removed by anyone with Write access to the Access Control Resource that contains the\r\n * [[Control]].\r\n *\r\n * @param accessControl The [[Control]] of which to get the Policies.\r\n * @returns The Policies that are listed in this [[Control]] as applying to the Resource it is linked to, and as removable by anyone with Write access to the Access Control Resource.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_getPolicyUrlAll(accessControl) {\r\n    return getIriAll(accessControl, acp.apply);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove a given Policy that applies to the Resource to which the given [[Control]] is linked,\r\n * and which can be removed by anyone with Write access to the Access Control Resource that contains\r\n * the Access Control.\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Policies.\r\n * @param policyUrl URL of the Policy that should no longer apply to the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given Policy removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_removePolicyUrl(accessControl, policyUrl) {\r\n    return removeIri(accessControl, acp.apply, policyUrl);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove all Policies that apply to the Resource to which the given [[Control]] is linked, and\r\n * which can be removed by anyone with Write access to the Access Control Resource that contains the\r\n * [[Control]].\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Policies.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with all Policies removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_removePolicyUrlAll(accessControl) {\r\n    return removeAll(accessControl, acp.apply);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an [[Control]] such that that Policy applies to the children of the\r\n * Resource to which the [[Control]] is linked.\r\n *\r\n * @param accessControl The [[Control]] to which the Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the children of the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given policy added to it as a Member Policy.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_addMemberPolicyUrl(accessControl, policyUrl) {\r\n    return addIri(accessControl, acp.applyMembers, policyUrl);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all Policies that apply to the children of the Resource to which the given [[Control]] is\r\n * linked, and which can be removed by anyone with Write access to the Access Control Resource that\r\n * contains the [[Control]].\r\n *\r\n * @param accessControl The [[Control]] of which to get the Policies.\r\n * @returns The Policies that are listed in this [[Control]] as applying to the children of the Resource it is linked to, and as removable by anyone with Write access to the Access Control Resource.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_getMemberPolicyUrlAll(accessControl) {\r\n    return getIriAll(accessControl, acp.applyMembers);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove a given Policy that applies to the children of the Resource to which the given Access\r\n * Control is linked, and which can be removed by anyone with Write access to the Access Control\r\n * Resource that contains the Access Control.\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Member Policy.\r\n * @param policyUrl URL of the Member Policy that should no longer apply to the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given Member Policy removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_removeMemberPolicyUrl(accessControl, policyUrl) {\r\n    return removeIri(accessControl, acp.applyMembers, policyUrl);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove all Policies that apply to the children of the Resource to which the given Access Control\r\n * is linked, and which can be removed by anyone with Write access to the Access Control Resource\r\n * that contains the Access Control.\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Member Policies.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with all Member Policies removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_removeMemberPolicyUrlAll(accessControl) {\r\n    return removeAll(accessControl, acp.applyMembers);\r\n}\r\nfunction internal_getInitialisedControl(resourceWithAcr) {\r\n    const allControls = internal_getControlAll(resourceWithAcr);\r\n    return allControls.length === 0 ? internal_createControl() : allControls[0];\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a Resource, check whether it is governed by Access Policies.\r\n * (Specifically, a Resource that is governed by Access Policies will refer to exactly one Access\r\n * Control Resource, and expose that to users who are allowed to see or modify access to the given\r\n * Resource.)\r\n *\r\n * @param resource Resource which may or may not be governed by Access Policies.\r\n * @returns True if the Resource refers to an Access Control Resource and is hence governed by Access Policies, or false if it does not.\r\n */\r\nfunction hasLinkedAcr(resource) {\r\n    return (hasServerResourceInfo(resource) &&\r\n        Array.isArray(resource.internal_resourceInfo.linkedResources[acp.accessControl]) &&\r\n        resource.internal_resourceInfo.linkedResources[acp.accessControl].length ===\r\n            1);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to the Access\r\n * Control Resource itself, rather than the Resource it governs.\r\n *\r\n * @param resourceWithAcr The [[Control]] to which the ACR Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Access Control Resource.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given ACR Policy added to it.\r\n */\r\nfunction addAcrPolicyUrl(resourceWithAcr, policyUrl) {\r\n    var _a;\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    let acrThing = (_a = getThing(acr, acrUrl)) !== null && _a !== void 0 ? _a : createThing({ url: acrUrl });\r\n    acrThing = addIri(acrThing, acp.access, policyUrl);\r\n    const updatedAcr = setThing(acr, acrThing);\r\n    const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to the Access\r\n * Control Resources of child Resources.\r\n *\r\n * @param resourceWithAcr The [[Control]] to which the ACR Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Access Control Resources of children of the Resource.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given ACR Policy added to it.\r\n */\r\nfunction addMemberAcrPolicyUrl(resourceWithAcr, policyUrl) {\r\n    var _a;\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    let acrThing = (_a = getThing(acr, acrUrl)) !== null && _a !== void 0 ? _a : createThing({ url: acrUrl });\r\n    acrThing = addIri(acrThing, acp.accessMembers, policyUrl);\r\n    const updatedAcr = setThing(acr, acrThing);\r\n    const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to an Access Control Resource itself, rather than\r\n * to the Resource it governs.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to it.\r\n * @returns URLs of the Policies that govern access to the given Access Control Resource.\r\n */\r\nfunction getAcrPolicyUrlAll(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return [];\r\n    }\r\n    return getIriAll(acrThing, acp.access);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to the Access Control Resources of the Resource's\r\n * children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to its children.\r\n * @returns URLs of the Policies that govern access to the Access Control Resources of the given Resource's children.\r\n */\r\nfunction getMemberAcrPolicyUrlAll(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return [];\r\n    }\r\n    return getIriAll(acrThing, acp.accessMembers);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to an Access Control Resource itself.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to which the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A new [[Control]] equal to the given Access Control, but with the given ACR Policy removed from it.\r\n */\r\nfunction removeAcrPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcrThing = removeIri(acrThing, acp.access, policyUrl);\r\n    const updatedAcr = setThing(acr, updatedAcrThing);\r\n    return internal_setAcr(resourceWithAcr, updatedAcr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to the Access Control Resources of the\r\n * Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to whose children's ACRs the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A new Access Control equal to the given Access Control, but with the given Member ACR Policy removed from it.\r\n */\r\nfunction removeMemberAcrPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcrThing = removeIri(acrThing, acp.accessMembers, policyUrl);\r\n    const updatedAcr = setThing(acr, updatedAcrThing);\r\n    return internal_setAcr(resourceWithAcr, updatedAcr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to an Access Control Resource itself.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to which no more Policies should apply.\r\n * @returns A new [[Control]] equal to the given [[Control]], but without any Policy applying to it.\r\n */\r\nfunction removeAcrPolicyUrlAll(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcrThing = removeAll(acrThing, acp.access);\r\n    const updatedAcr = setThing(acr, updatedAcrThing);\r\n    return internal_setAcr(resourceWithAcr, updatedAcr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to the Access Control Resources of the Resource's\r\n * children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource that should no longer apply Policies to its children's ACRs.\r\n * @returns A new [[Control]] equal to the given [[Control]], but without any Policy applying to its children's ACRs.\r\n */\r\nfunction removeMemberAcrPolicyUrlAll(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcrThing = removeAll(acrThing, acp.accessMembers);\r\n    const updatedAcr = setThing(acr, updatedAcrThing);\r\n    return internal_setAcr(resourceWithAcr, updatedAcr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to that Resource.\r\n *\r\n * @param resourceWithAcr The Resource to which the ACR Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Resource.\r\n * @returns A new Resource equal to the given Resource, but with the given ACR Policy added to it.\r\n */\r\nfunction addPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const control = internal_getInitialisedControl(resourceWithAcr);\r\n    const updatedControl = internal_addPolicyUrl(control, policyUrl);\r\n    const updatedResource = internal_setControl(resourceWithAcr, updatedControl);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to that\r\n * Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource to which the ACR Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Resource's children.\r\n * @returns A new Resource equal to the given Resource, but with the given Member ACR Policy added to it.\r\n */\r\nfunction addMemberPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const control = internal_getInitialisedControl(resourceWithAcr);\r\n    const updatedControl = internal_addMemberPolicyUrl(control, policyUrl);\r\n    const updatedResource = internal_setControl(resourceWithAcr, updatedControl);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to a Resource.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to it.\r\n * @returns URLs of the Policies that govern access to the given Resource.\r\n */\r\nfunction getPolicyUrlAll(resourceWithAcr) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const policyUrlsByControl = controls.map((control) => internal_getPolicyUrlAll(control));\r\n    const uniquePolicyUrls = new Set();\r\n    policyUrlsByControl.forEach((policyUrls) => {\r\n        policyUrls.forEach((url) => uniquePolicyUrls.add(url));\r\n    });\r\n    return Array.from(uniquePolicyUrls);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to a Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to its children.\r\n * @returns URLs of the Policies that govern access to the given Resource's children.\r\n */\r\nfunction getMemberPolicyUrlAll(resourceWithAcr) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const memberPolicyUrlsByControl = controls.map((control) => internal_getMemberPolicyUrlAll(control));\r\n    const uniquePolicyUrls = new Set();\r\n    memberPolicyUrlsByControl.forEach((policyUrls) => {\r\n        policyUrls.forEach((url) => uniquePolicyUrls.add(url));\r\n    });\r\n    return Array.from(uniquePolicyUrls);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to a Resource.\r\n *\r\n * @param resourceWithAcr The Resource, with its Access Control Resource, to which the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A new Resource equal to the given Resource, but with the given Policy removed from it.\r\n */\r\nfunction removePolicyUrl(resourceWithAcr, policyUrl) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const updatedControls = controls.map((control) => internal_removePolicyUrl(control, policyUrl));\r\n    const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to the Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to whose children the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A new Resource equal to the given Resource but with the given Member Policy removed from it.\r\n */\r\nfunction removeMemberPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const updatedControls = controls.map((control) => internal_removeMemberPolicyUrl(control, policyUrl));\r\n    const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to a Resource.\r\n *\r\n * @param resourceWithAcr The Resource, with its Access Control Resource, to which no more Policies should apply.\r\n * @returns A new Resource equal to the given Resource, but without any Policy applying to it.\r\n */\r\nfunction removePolicyUrlAll(resourceWithAcr) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const updatedControls = controls.map((control) => internal_removePolicyUrlAll(control));\r\n    const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to the Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource that should no longer apply Policies to its children.\r\n * @returns A new Resource equal to the given Resource, but without any Policy applying to its children.\r\n */\r\nfunction removeMemberPolicyUrlAll(resourceWithAcr) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const updatedControls = controls.map((control) => internal_removeMemberPolicyUrlAll(control));\r\n    const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * Gets a human-readable representation of the given [[Control]] to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param control The Control to get a human-readable representation of.\r\n */\r\nfunction acrAsMarkdown(resourceWithAcr) {\r\n    let markdown = `# Access control for ${getSourceUrl(resourceWithAcr)}\\n`;\r\n    const policyUrls = getPolicyUrlAll(resourceWithAcr);\r\n    const memberPolicyUrls = getMemberPolicyUrlAll(resourceWithAcr);\r\n    const acrPolicyUrls = getAcrPolicyUrlAll(resourceWithAcr);\r\n    const memberAcrPolicyUrls = getMemberAcrPolicyUrlAll(resourceWithAcr);\r\n    if (policyUrls.length === 0 &&\r\n        memberPolicyUrls.length === 0 &&\r\n        acrPolicyUrls.length === 0 &&\r\n        memberAcrPolicyUrls.length === 0) {\r\n        markdown += \"\\n<no policies specified yet>\\n\";\r\n    }\r\n    if (policyUrls.length > 0) {\r\n        markdown += \"\\nThe following policies apply to this resource:\\n- \";\r\n        markdown += policyUrls.join(\"\\n- \") + \"\\n\";\r\n    }\r\n    if (acrPolicyUrls.length > 0) {\r\n        markdown +=\r\n            \"\\nThe following policies apply to the access control resource for this resource:\\n- \";\r\n        markdown += acrPolicyUrls.join(\"\\n- \") + \"\\n\";\r\n    }\r\n    if (memberPolicyUrls.length > 0) {\r\n        markdown +=\r\n            \"\\nThe following policies apply to the children of this resource:\\n- \";\r\n        markdown += memberPolicyUrls.join(\"\\n- \") + \"\\n\";\r\n    }\r\n    if (memberAcrPolicyUrls.length > 0) {\r\n        markdown +=\r\n            \"\\nThe following policies apply to the access control resources for children of this resource:\\n- \";\r\n        markdown += memberAcrPolicyUrls.join(\"\\n- \") + \"\\n\";\r\n    }\r\n    return markdown;\r\n}\n\nvar acpControl = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  hasLinkedAcr: hasLinkedAcr,\n  addAcrPolicyUrl: addAcrPolicyUrl,\n  addMemberAcrPolicyUrl: addMemberAcrPolicyUrl,\n  getAcrPolicyUrlAll: getAcrPolicyUrlAll,\n  getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll,\n  removeAcrPolicyUrl: removeAcrPolicyUrl,\n  removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl,\n  removeAcrPolicyUrlAll: removeAcrPolicyUrlAll,\n  removeMemberAcrPolicyUrlAll: removeMemberAcrPolicyUrlAll,\n  addPolicyUrl: addPolicyUrl,\n  addMemberPolicyUrl: addMemberPolicyUrl,\n  getPolicyUrlAll: getPolicyUrlAll,\n  getMemberPolicyUrlAll: getMemberPolicyUrlAll,\n  removePolicyUrl: removePolicyUrl,\n  removeMemberPolicyUrl: removeMemberPolicyUrl,\n  removePolicyUrlAll: removePolicyUrlAll,\n  removeMemberPolicyUrlAll: removeMemberPolicyUrlAll,\n  acrAsMarkdown: acrAsMarkdown\n});\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a SolidDataset and its associated Access Control Resource (if available to the current user).\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A SolidDataset and the ACR that applies to it, if available to the authenticated user.\r\n */\r\nasync function getSolidDatasetWithAcr(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const solidDataset = await getSolidDataset(urlString, config);\r\n    const acp = await fetchAcr(solidDataset, config);\r\n    return Object.assign(solidDataset, acp);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a file and its associated Access Control Resource (if available to the current user).\r\n *\r\n * @param url URL of the file to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A file and the ACR that applies to it, if available to the authenticated user.\r\n */\r\nasync function getFileWithAcr(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const file = await getFile(urlString, config);\r\n    const acp = await fetchAcr(file, config);\r\n    return Object.assign(file, acp);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Retrieve information about a Resource and its associated Access Control Resource (if available to\r\n * the current user), without fetching the Resource itself.\r\n *\r\n * @param url URL of the Resource about which to fetch its information.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Metadata describing a Resource, and the ACR that applies to it, if available to the authenticated user.\r\n */\r\nasync function getResourceInfoWithAcr(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const resourceInfo = await getResourceInfo(urlString, config);\r\n    const acp = await fetchAcr(resourceInfo, config);\r\n    return Object.assign(resourceInfo, acp);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a SolidDataset, and:\r\n * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to\r\n *                                          the current user), and all the Access Control Policies\r\n *                                          referred to therein, if available to the current user.\r\n * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current\r\n *                                          user), or its Fallback ACL if it does not exist.\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A SolidDataset and either the ACL access data or the ACR access data, if available to the current user.\r\n */\r\nasync function getSolidDatasetWithAccessDatasets(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const solidDataset = await getSolidDataset(urlString, config);\r\n    if (hasAccessibleAcl(solidDataset)) {\r\n        const acl = await internal_fetchAcl(solidDataset, config);\r\n        return Object.assign(solidDataset, { internal_acl: acl });\r\n    }\r\n    else {\r\n        const acr = await fetchAcr(solidDataset, config);\r\n        return Object.assign(solidDataset, acr);\r\n    }\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a File, and:\r\n * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to\r\n *                                          the current user), and all the Access Control Policies\r\n *                                          referred to therein, if available to the current user.\r\n * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current\r\n *                                          user), or its Fallback ACL if it does not exist.\r\n *\r\n * @param url URL of the File to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A File and either the ACL access data or the ACR access data, if available to the current user.\r\n */\r\nasync function getFileWithAccessDatasets(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const file = await getFile(urlString, config);\r\n    if (hasAccessibleAcl(file)) {\r\n        const acl = await internal_fetchAcl(file, config);\r\n        return Object.assign(file, { internal_acl: acl });\r\n    }\r\n    else {\r\n        const acr = await fetchAcr(file, config);\r\n        return Object.assign(file, acr);\r\n    }\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch information about a Resource, and:\r\n * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to\r\n *                                          the current user), and all the Access Control Policies\r\n *                                          referred to therein, if available to the current user.\r\n * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current\r\n *                                          user), or its Fallback ACL if it does not exist.\r\n *\r\n * @param url URL of the Resource information about which to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Information about a Resource and either the ACL access data or the ACR access data, if available to the current user.\r\n */\r\nasync function getResourceInfoWithAccessDatasets(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const resourceInfo = await getResourceInfo(urlString, config);\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        const acl = await internal_fetchAcl(resourceInfo, config);\r\n        return Object.assign(resourceInfo, { internal_acl: acl });\r\n    }\r\n    else {\r\n        const acr = await fetchAcr(resourceInfo, config);\r\n        return Object.assign(resourceInfo, acr);\r\n    }\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Save a Resource's Access Control Resource.\r\n *\r\n * @param resource Resource with an Access Control Resource that should be saved.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n */\r\nasync function saveAcrFor(resource, options = internal_defaultFetchOptions) {\r\n    const acr = internal_getAcr(resource);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const savedAcr = await saveSolidDatasetAt(getSourceUrl(acr), acr, config);\r\n    return internal_setAcr(resource, savedAcr);\r\n}\r\n/**\r\n * @param resource Resource of which to check whether it has an Access Control Resource attached.\r\n * @returns Boolean representing whether the given Resource has an Access Control Resource attached for use in e.g. [[getControl]].\r\n */\r\nfunction hasAccessibleAcr(resource) {\r\n    return (typeof resource.internal_acp === \"object\" &&\r\n        typeof resource.internal_acp.acr === \"object\");\r\n}\r\nasync function fetchAcr(resource, options) {\r\n    if (!hasLinkedAcr(resource)) {\r\n        return {\r\n            internal_acp: {\r\n                acr: null,\r\n            },\r\n        };\r\n    }\r\n    let acr;\r\n    try {\r\n        acr = await getSolidDataset(\r\n        // Whereas a Resource can generally have multiple linked Resources for the same relation,\r\n        // it can only have one Access Control Resource for that ACR to be valid.\r\n        // Hence the accessing of [0] directly:\r\n        resource.internal_resourceInfo.linkedResources[acp.accessControl][0], options);\r\n    }\r\n    catch (e) {\r\n        return {\r\n            internal_acp: {\r\n                acr: null,\r\n            },\r\n        };\r\n    }\r\n    const resourceUrl = getSourceUrl(resource);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrDataset = Object.assign(acr, {\r\n        accessTo: getSourceUrl(resource),\r\n    });\r\n    const acpInfo = {\r\n        internal_acp: {\r\n            acr: acrDataset,\r\n        },\r\n    };\r\n    return acpInfo;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * To make it easy to fetch all the relevant Access Policy Resources,\r\n * this function returns all referenced Access Policy Resources referenced in an\r\n * Access Control Resource.\r\n * In other words, if Access Controls refer to different Policies in the same\r\n * Access Policy Resource, this function will only return that Access Policy\r\n * Resource's URL once.\r\n *\r\n * @param withAcr A Resource with an Access Control Resource attached.\r\n * @returns List of all unique Access Policy Resources that are referenced in the given Access Control Resource.\r\n */\r\nfunction getReferencedPolicyUrlAll(withAcr) {\r\n    const policyUrls = getPolicyUrlAll(withAcr)\r\n        .map(getResourceUrl)\r\n        .concat(getMemberPolicyUrlAll(withAcr).map(getResourceUrl))\r\n        .concat(getAcrPolicyUrlAll(withAcr).map(getResourceUrl))\r\n        .concat(getMemberAcrPolicyUrlAll(withAcr).map(getResourceUrl));\r\n    const uniqueUrls = Array.from(new Set(policyUrls));\r\n    return uniqueUrls;\r\n}\r\n/**\r\n * To verify whether two URLs are at the same location, we need to strip the hash.\r\n * This function does that.\r\n */\r\nfunction getResourceUrl(urlWithHash) {\r\n    const url = new URL(urlWithHash);\r\n    url.hash = \"\";\r\n    return url.href;\r\n}\n\nvar acpAcp = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getSolidDatasetWithAcr: getSolidDatasetWithAcr,\n  getFileWithAcr: getFileWithAcr,\n  getResourceInfoWithAcr: getResourceInfoWithAcr,\n  getSolidDatasetWithAccessDatasets: getSolidDatasetWithAccessDatasets,\n  getFileWithAccessDatasets: getFileWithAccessDatasets,\n  getResourceInfoWithAccessDatasets: getResourceInfoWithAccessDatasets,\n  saveAcrFor: saveAcrFor,\n  hasAccessibleAcr: hasAccessibleAcr,\n  getReferencedPolicyUrlAll: getReferencedPolicyUrlAll\n});\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * NOTE: Don't export for now (i.e. if exported, should this be `isAcpRule()` so\r\n * as not to clash with `isAclRule()`.\r\n *\r\n * @param thing the [[Thing]] to check to see if it's an ACP rule or not\r\n */\r\nfunction isRule(thing) {\r\n    return getIriAll(thing, rdf.type).includes(acp.Rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a rule that refines the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the required rules,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rule The rule to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new rule added.\r\n * @since Unreleased\r\n */\r\nfunction addRequiredRuleUrl(policy, rule) {\r\n    return addIri(policy, acp.allOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a rule that refines the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the required rules,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] from which the rule should be removed.\r\n * @param rule The rule to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the rule removed.\r\n * @since Unreleased\r\n */\r\nfunction removeRequiredRuleUrl(policy, rule) {\r\n    return removeIri(policy, acp.allOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrites the rule refining the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the required rules,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rules The rules the policy requires.\r\n * @returns A new [[Policy]] clone of the original one, with the required rules replaced.\r\n * @since Unreleased\r\n */\r\nfunction setRequiredRuleUrl(policy, rule) {\r\n    return setIri(policy, acp.allOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Rule]]'s required by the given [[Policy]]\r\n * @param policy The [[policy]] from which the rules should be read.\r\n * @returns A list of the required [[Rule]]'s\r\n * @since unreleased\r\n */\r\nfunction getRequiredRuleUrlAll(policy) {\r\n    return getIriAll(policy, acp.allOf);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a rule that extends the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the required rules,\r\n * they will be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rule The rule to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new rule added.\r\n * @since Unreleased\r\n */\r\nfunction addOptionalRuleUrl(policy, rule) {\r\n    return addIri(policy, acp.anyOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a rule that extends the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the required rules,\r\n * they will be granted access.\r\n * @param policy The [[Policy]] from which the rule should be removed.\r\n * @param rule The rule to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the rule removed.\r\n * @since Unreleased\r\n */\r\nfunction removeOptionalRuleUrl(policy, rule) {\r\n    return removeIri(policy, acp.anyOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the rule extending the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the required rules,\r\n * they will be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rules The rules the policy accepts.\r\n * @returns A new [[Policy]] clone of the original one, with the optional rules replaced.\r\n * @since Unreleased\r\n */\r\nfunction setOptionalRuleUrl(policy, rule) {\r\n    return setIri(policy, acp.anyOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Rule]]'s accepted by the given [[Policy]]\r\n * @param policy The [[policy]] from which the rules should be read.\r\n * @returns A list of the optional [[Rule]]'s\r\n * @since unreleased\r\n */\r\nfunction getOptionalRuleUrlAll(policy) {\r\n    return getIriAll(policy, acp.anyOf);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a rule that restricts the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the forbidden rules,\r\n * they will **not** be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rule The rule to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new rule added.\r\n * @since Unreleased\r\n */\r\nfunction addForbiddenRuleUrl(policy, rule) {\r\n    return addIri(policy, acp.noneOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a rule that restricts the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the forbidden rules,\r\n * they will **not** be granted access.\r\n * @param policy The [[Policy]] from which the rule should be removed.\r\n * @param rule The rule to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the rule removed.\r\n * @since Unreleased\r\n */\r\nfunction removeForbiddenRuleUrl(policy, rule) {\r\n    return removeIri(policy, acp.noneOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set the rules restrincting the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the required rules,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rules The rules the policy accepts.\r\n * @returns A new [[Policy]] clone of the original one, with the optional rules replaced.\r\n * @since Unreleased\r\n */\r\nfunction setForbiddenRuleUrl(policy, rule) {\r\n    return setIri(policy, acp.noneOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Rule]]'s forbidden by the given [[Policy]]\r\n * @param policy The [[policy]] from which the rules should be read.\r\n * @returns A list of the forbidden [[Rule]]'s\r\n * @since unreleased\r\n */\r\nfunction getForbiddenRuleurlAll(policy) {\r\n    return getIriAll(policy, acp.noneOf);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[Rule]].\r\n *\r\n * @param url URL that identifies this [[Rule]].\r\n */\r\nfunction createRule(url) {\r\n    const stringUrl = internal_toIriString(url);\r\n    let ruleThing = createThing({ url: stringUrl });\r\n    ruleThing = setUrl(ruleThing, rdf.type, acp.Rule);\r\n    return ruleThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Rule]] with the given URL from an [[RuleDataset]].\r\n *\r\n * @param ruleResource The Resource that contains the given [[Rule]].\r\n * @param url URL that identifies this [[Rule]].\r\n * @returns The requested [[Rule]], if it exists, or `null` if it does not.\r\n */\r\nfunction getRule(ruleResource, url) {\r\n    const foundThing = getThing(ruleResource, url);\r\n    if (foundThing === null || getUrl(foundThing, rdf.type) !== acp.Rule) {\r\n        return null;\r\n    }\r\n    return foundThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Gets the [[Rule]]s from a [[SolidDataset]].\r\n *\r\n * @param ruleResource The Resource that contains (zero of more) [[Rule]]s.\r\n * @returns The [[Rule]]s contained in this resource.\r\n */\r\nfunction getRuleAll(ruleResource) {\r\n    const things = getThingAll(ruleResource);\r\n    return things.filter(isRule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[Rule]] into the given [[SolidDataset]], replacing previous\r\n * instances of that Rule.\r\n *\r\n * @param ruleResource The Resource that contains (zero of more) [[Rule]]s.\r\n * @returns A new RuleDataset equal to the given Rule Resource, but with the given Rule.\r\n */\r\nfunction setRule(ruleResource, rule) {\r\n    return setThing(ruleResource, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * List all the agents a [[Rule]] applies **directly** to. This will not include agents\r\n * that are part of a group the [[Rule]] applies to, nor will it include specific agent\r\n * classes, such as authenticated or public agents.\r\n *\r\n * @param rule The rule from which agents are read.\r\n * @returns A list of the WebIDs of agents included in the rule.\r\n * @since Unreleased\r\n */\r\nfunction getAgentAll(rule) {\r\n    return getIriAll(rule, acp.agent).filter((agent) => agent !== acp.PublicAgent &&\r\n        agent !== acp.AuthenticatedAgent &&\r\n        agent !== acp.CreatorAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the agents the [[Rule]] applies to with the provided agents.\r\n *\r\n * @param rule The rule for which agents are set.\r\n * @param agents The list of agents the rule should apply to.\r\n * @returns A copy of the input rule, applying to a different set of agents.\r\n * @since Unreleased\r\n */\r\nfunction setAgent(rule, agent) {\r\n    // Preserve the special agent classes authenticated and public, which we\r\n    // don't want to overwrite with this function.\r\n    const isPublic = hasPublic(rule);\r\n    const isAuthenticated = hasAuthenticated(rule);\r\n    let result = setIri(rule, acp.agent, agent);\r\n    // Restore public and authenticated\r\n    result = setPublic(result, isPublic);\r\n    result = setAuthenticated(result, isAuthenticated);\r\n    return result;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Apply the [[Rule]] to an additional agent.\r\n *\r\n * @param rule The [[Rule]] to be applied to an additional agent.\r\n * @param agent The agent the [[Rule]] should apply to.\r\n * @returns A copy of the [[Rule]], applying to an additional agent.\r\n * @since Unreleased\r\n */\r\nfunction addAgent(rule, agent) {\r\n    return addIri(rule, acp.agent, agent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Prevent the [[Rule]] from applying to a given agent directly. This will not\r\n * remove the agent from any groups the rule applies to.\r\n *\r\n * @param rule The [[Rule]] that should no longer apply to a given agent.\r\n * @param agent The agent the rule should no longer apply to.\r\n * @returns A copy of the rule, not applying to the given agent.\r\n * @since Unreleased\r\n */\r\nfunction removeAgent(rule, agent) {\r\n    return removeIri(rule, acp.agent, agent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Lists all the groups a [[Rule]] applies to.\r\n *\r\n * @param rule The rule from which groups are read.\r\n * @returns A list of the [[URL]]'s of groups included in the rule.\r\n * @since Unreleased\r\n */\r\nfunction getGroupAll(rule) {\r\n    return getIriAll(rule, acp.group);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the groups the [[Rule]] applies to with the provided groups.\r\n *\r\n * @param rule The rule for which groups are set.\r\n * @param agents The list of groups the rule should apply to.\r\n * @returns A copy of the input rule, applying to a different set of groups.\r\n * @since Unreleased\r\n */\r\nfunction setGroup(rule, group) {\r\n    return setIri(rule, acp.group, group);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Apply the [[Rule]] to an additional group.\r\n *\r\n * @param rule The [[Rule]] to be applied to an additional group.\r\n * @param agent The group the [[Rule]] should apply to.\r\n * @returns A copy of the [[Rule]], applying to an additional group.\r\n * @since Unreleased\r\n */\r\nfunction addGroup(rule, group) {\r\n    return addIri(rule, acp.group, group);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Prevent the [[Rule]] from applying to a given group.\r\n *\r\n * @param rule The [[Rule]] that should no longer apply to a given group.\r\n * @param agent The group the rule should no longer apply to.\r\n * @returns A copy of the rule, not applying to the given group.\r\n * @since Unreleased\r\n */\r\nfunction removeGroup(rule, group) {\r\n    return removeIri(rule, acp.group, group);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the rule applies to any agent.\r\n *\r\n * @param rule The rule checked for public access.\r\n * @returns Whether the rule applies to any agent or not.\r\n */\r\nfunction hasPublic(rule) {\r\n    return (getIriAll(rule, acp.agent).filter((agent) => agent === acp.PublicAgent)\r\n        .length > 0);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Enable or disable a rule from applying to any agent.\r\n *\r\n * @param rule The rule being modified.\r\n * @param hasPublic A boolean indicating whether the rule should apply or not to any agent.\r\n * @returns A copy of the rule, updated to apply/not apply to any agent.\r\n * @status Unreleased\r\n */\r\nfunction setPublic(rule, hasPublic) {\r\n    return hasPublic\r\n        ? addIri(rule, acp.agent, acp.PublicAgent)\r\n        : removeIri(rule, acp.agent, acp.PublicAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the rule applies to any authenticated agent.\r\n *\r\n * @param rule The rule checked for authenticated access.\r\n * @returns Whether the rule applies to any authenticated agent or not.\r\n */\r\nfunction hasAuthenticated(rule) {\r\n    return (getIriAll(rule, acp.agent).filter((agent) => agent === acp.AuthenticatedAgent).length > 0);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Enable or disable a rule from applying to any authenticated agent.\r\n *\r\n * @param rule The rule being modified.\r\n * @param hasPublic A boolean indicating whether the rule should apply or not to any authenticated agent.\r\n * @returns A copy of the rule, updated to apply/not apply to any authenticated agent.\r\n * @status Unreleased\r\n */\r\nfunction setAuthenticated(rule, authenticated) {\r\n    return authenticated\r\n        ? addIri(rule, acp.agent, acp.AuthenticatedAgent)\r\n        : removeIri(rule, acp.agent, acp.AuthenticatedAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the rule applies to the creator of the Resource.\r\n *\r\n * @param rule The rule checked for authenticated access.\r\n * @returns Whether the rule applies to the creator of the Resource or not.\r\n */\r\nfunction hasCreator(rule) {\r\n    return (getIriAll(rule, acp.agent).filter((agent) => agent === acp.CreatorAgent)\r\n        .length > 0);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Enable or disable a rule from applying to the creator of the Resource.\r\n *\r\n * @param rule The rule being modified.\r\n * @param hasPublic A boolean indicating whether the rule should apply or not to the creator of the Resource.\r\n * @returns A copy of the rule, updated to apply/not apply to the creator of the Resource.\r\n * @status Unreleased\r\n */\r\nfunction setCreator(rule, creator) {\r\n    return creator\r\n        ? addIri(rule, acp.agent, acp.CreatorAgent)\r\n        : removeIri(rule, acp.agent, acp.CreatorAgent);\r\n}\r\n/**\r\n * Gets a human-readable representation of the given [[Rule]] to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param rule The Rule to get a human-readable representation of.\r\n */\r\nfunction ruleAsMarkdown(rule) {\r\n    let markdown = `## Rule: ${asUrl(rule)}\\n\\n`;\r\n    let targetEnumeration = \"\";\r\n    if (hasPublic(rule)) {\r\n        targetEnumeration += \"- Everyone\\n\";\r\n    }\r\n    if (hasAuthenticated(rule)) {\r\n        targetEnumeration += \"- All authenticated agents\\n\";\r\n    }\r\n    if (hasCreator(rule)) {\r\n        targetEnumeration += \"- The creator of this resource\\n\";\r\n    }\r\n    const targetAgents = getAgentAll(rule);\r\n    if (targetAgents.length > 0) {\r\n        targetEnumeration += \"- The following agents:\\n  - \";\r\n        targetEnumeration += targetAgents.join(\"\\n  - \") + \"\\n\";\r\n    }\r\n    const targetGroups = getGroupAll(rule);\r\n    if (targetGroups.length > 0) {\r\n        targetEnumeration += \"- Members of the following groups:\\n  - \";\r\n        targetEnumeration += targetGroups.join(\"\\n  - \") + \"\\n\";\r\n    }\r\n    markdown +=\r\n        targetEnumeration.length > 0\r\n            ? \"This rule applies to:\\n\" + targetEnumeration\r\n            : \"<empty>\\n\";\r\n    return markdown;\r\n}\n\nvar acpRule = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  addRequiredRuleUrl: addRequiredRuleUrl,\n  removeRequiredRuleUrl: removeRequiredRuleUrl,\n  setRequiredRuleUrl: setRequiredRuleUrl,\n  getRequiredRuleUrlAll: getRequiredRuleUrlAll,\n  addOptionalRuleUrl: addOptionalRuleUrl,\n  removeOptionalRuleUrl: removeOptionalRuleUrl,\n  setOptionalRuleUrl: setOptionalRuleUrl,\n  getOptionalRuleUrlAll: getOptionalRuleUrlAll,\n  addForbiddenRuleUrl: addForbiddenRuleUrl,\n  removeForbiddenRuleUrl: removeForbiddenRuleUrl,\n  setForbiddenRuleUrl: setForbiddenRuleUrl,\n  getForbiddenRuleurlAll: getForbiddenRuleurlAll,\n  createRule: createRule,\n  getRule: getRule,\n  getRuleAll: getRuleAll,\n  setRule: setRule,\n  getAgentAll: getAgentAll,\n  setAgent: setAgent,\n  addAgent: addAgent,\n  removeAgent: removeAgent,\n  getGroupAll: getGroupAll,\n  setGroup: setGroup,\n  addGroup: addGroup,\n  removeGroup: removeGroup,\n  hasPublic: hasPublic,\n  setPublic: setPublic,\n  hasAuthenticated: hasAuthenticated,\n  setAuthenticated: setAuthenticated,\n  hasCreator: hasCreator,\n  setCreator: setCreator,\n  ruleAsMarkdown: ruleAsMarkdown\n});\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[Policy]].\r\n *\r\n * @param url URL that identifies this Policy.\r\n */\r\nfunction createPolicy(url) {\r\n    const stringUrl = internal_toIriString(url);\r\n    let policyThing = createThing({ url: stringUrl });\r\n    policyThing = setUrl(policyThing, rdf.type, acp.Policy);\r\n    return policyThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Policy]] with the given URL from an [[PolicyDataset]].\r\n *\r\n * @param policyResource The Resource that contains the given Policy.\r\n * @param url URL that identifies this Policy.\r\n * @returns The requested Policy, if it exists, or `null` if it does not.\r\n */\r\nfunction getPolicy(policyResource, url) {\r\n    const foundThing = getThing(policyResource, url);\r\n    if (foundThing === null || getUrl(foundThing, rdf.type) !== acp.Policy) {\r\n        return null;\r\n    }\r\n    return foundThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all [[Policy]]'s in a given [[PolicyDataset]].\r\n *\r\n * @param policyResource The Resource that contains Access Policies.\r\n */\r\nfunction getPolicyAll(policyResource) {\r\n    const foundThings = getThingAll(policyResource);\r\n    const foundPolicies = foundThings.filter((thing) => !isThingLocal(thing) && getUrlAll(thing, rdf.type).includes(acp.Policy));\r\n    return foundPolicies;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove the given [[Policy]] from the given [[PolicyDataset]].\r\n *\r\n * @param policyResource The Resource that contains Access Policies.\r\n * @param policy The Policy to remove from the resource.\r\n */\r\nfunction removePolicy(policyResource, policy) {\r\n    return removeThing(policyResource, policy);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[Policy]] into the given [[PolicyDataset]], replacing previous instances of that Policy.\r\n *\r\n * @param policyResource The Resource that contains Access Policies.\r\n * @param policy The Policy to insert into the Resource.\r\n * @returns A new dataset equal to the given resource, but with the given Policy.\r\n */\r\nfunction setPolicy(policyResource, policy) {\r\n    return setThing(policyResource, policy);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given\r\n * Policy, but with the given Access Modes allowed on it.\r\n *\r\n * @param policy The Policy on which to set the modes to allow.\r\n * @param modes Modes to allow for this Policy.\r\n */\r\nfunction setAllowModes(policy, modes) {\r\n    let newPolicy = removeAll(policy, acp.allow);\r\n    if (modes.read === true) {\r\n        newPolicy = addIri(newPolicy, acp.allow, acp.Read);\r\n    }\r\n    if (modes.append === true) {\r\n        newPolicy = addIri(newPolicy, acp.allow, acp.Append);\r\n    }\r\n    if (modes.write === true) {\r\n        newPolicy = addIri(newPolicy, acp.allow, acp.Write);\r\n    }\r\n    return newPolicy;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]], return which [[AccessModes]] it allows.\r\n *\r\n * @param policy The Policy for which you want to know the Access Modes it allows.\r\n */\r\nfunction getAllowModes(policy) {\r\n    const allowedModes = getIriAll(policy, acp.allow);\r\n    return {\r\n        read: allowedModes.includes(acp.Read),\r\n        append: allowedModes.includes(acp.Append),\r\n        write: allowedModes.includes(acp.Write),\r\n    };\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given\r\n * Policy, but with the given Access Modes disallowed on it.\r\n *\r\n * @param policy The Policy on which to set the modes to disallow.\r\n * @param modes Modes to disallow for this Policy.\r\n */\r\nfunction setDenyModes(policy, modes) {\r\n    let newPolicy = removeAll(policy, acp.deny);\r\n    if (modes.read === true) {\r\n        newPolicy = addIri(newPolicy, acp.deny, acp.Read);\r\n    }\r\n    if (modes.append === true) {\r\n        newPolicy = addIri(newPolicy, acp.deny, acp.Append);\r\n    }\r\n    if (modes.write === true) {\r\n        newPolicy = addIri(newPolicy, acp.deny, acp.Write);\r\n    }\r\n    return newPolicy;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]], return which [[AccessModes]] it disallows.\r\n *\r\n * @param policy The Policy on which you want to know the Access Modes it disallows.\r\n */\r\nfunction getDenyModes(policy) {\r\n    const deniedModes = getIriAll(policy, acp.deny);\r\n    return {\r\n        read: deniedModes.includes(acp.Read),\r\n        append: deniedModes.includes(acp.Append),\r\n        write: deniedModes.includes(acp.Write),\r\n    };\r\n}\r\n/**\r\n * Gets a human-readable representation of the given [[Policy]] to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param policy The Policy to get a human-readable representation of.\r\n */\r\nfunction policyAsMarkdown(policy) {\r\n    function getStatus(allow, deny) {\r\n        if (deny) {\r\n            return \"denied\";\r\n        }\r\n        if (allow) {\r\n            return \"allowed\";\r\n        }\r\n        return \"unspecified\";\r\n    }\r\n    const allowModes = getAllowModes(policy);\r\n    const denyModes = getDenyModes(policy);\r\n    let markdown = `## Policy: ${asUrl(policy)}\\n\\n`;\r\n    markdown += `- Read: ${getStatus(allowModes.read, denyModes.read)}\\n`;\r\n    markdown += `- Append: ${getStatus(allowModes.append, denyModes.append)}\\n`;\r\n    markdown += `- Write: ${getStatus(allowModes.write, denyModes.write)}\\n`;\r\n    const requiredRules = getRequiredRuleUrlAll(policy);\r\n    const optionalRules = getOptionalRuleUrlAll(policy);\r\n    const forbiddenRules = getForbiddenRuleurlAll(policy);\r\n    if (requiredRules.length === 0 &&\r\n        optionalRules.length === 0 &&\r\n        forbiddenRules.length === 0) {\r\n        markdown += \"\\n<no rules specified yet>\\n\";\r\n    }\r\n    if (requiredRules.length > 0) {\r\n        markdown += \"\\nAll of these rules should match:\\n\";\r\n        markdown += \"- \" + requiredRules.join(\"\\n- \") + \"\\n\";\r\n    }\r\n    if (optionalRules.length > 0) {\r\n        markdown += \"\\nAt least one of these rules should match:\\n\";\r\n        markdown += \"- \" + optionalRules.join(\"\\n- \") + \"\\n\";\r\n    }\r\n    if (forbiddenRules.length > 0) {\r\n        markdown += \"\\nNone of these rules should match:\\n\";\r\n        markdown += \"- \" + forbiddenRules.join(\"\\n- \") + \"\\n\";\r\n    }\r\n    return markdown;\r\n}\n\nvar acpPolicy = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createPolicy: createPolicy,\n  getPolicy: getPolicy,\n  getPolicyAll: getPolicyAll,\n  removePolicy: removePolicy,\n  setPolicy: setPolicy,\n  setAllowModes: setAllowModes,\n  getAllowModes: getAllowModes,\n  setDenyModes: setDenyModes,\n  getDenyModes: getDenyModes,\n  policyAsMarkdown: policyAsMarkdown\n});\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n *\r\n * ```{warning}\r\n * Do not use this function in production code.  For use in **unit tests** that require a\r\n * [[AccessControlResource]].\r\n * ```\r\n *\r\n * Initialises a new empty Access Control Resource for a given Resource for use\r\n * in **unit tests**.\r\n *\r\n * @param resourceUrl The URL of the Resource to which the mocked ACR should apply.\r\n * @returns The mocked empty Access Control Resource for the given Resource.\r\n */\r\nfunction mockAcrFor(resourceUrl) {\r\n    const acrUrl = new URL(\"access-control-resource\", resourceUrl).href;\r\n    const acr = Object.assign(mockSolidDatasetFrom(acrUrl), { accessTo: resourceUrl });\r\n    return acr;\r\n}\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code.  For use in **unit tests** that require a\r\n * Resource with an [[AccessControlResource]].\r\n * ```\r\n *\r\n * Attaches an Access Control Resource to a given [[SolidDataset]] for use\r\n * in **unit tests**; e.g., unit tests that call [[getAccessControl]].\r\n *\r\n * @param resource The Resource to mock up with a new resource ACL.\r\n * @param accessControlResource The Access Control Resource to attach to the given Resource.\r\n * @returns The input Resource with an empty resource ACL attached.\r\n */\r\nfunction addMockAcrTo(resource, accessControlResource = mockAcrFor(getSourceUrl(resource))) {\r\n    const resourceWithAcr = Object.assign(internal_cloneResource(resource), {\r\n        internal_acp: {\r\n            acr: accessControlResource,\r\n            aprs: {},\r\n        },\r\n    });\r\n    return resourceWithAcr;\r\n}\n\nvar acpMock = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  mockAcrFor: mockAcrFor,\n  addMockAcrTo: addMockAcrTo\n});\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nconst v1ControlFunctions = {\r\n    hasLinkedAcr,\r\n    addAcrPolicyUrl,\r\n    addMemberAcrPolicyUrl,\r\n    getAcrPolicyUrlAll,\r\n    getMemberAcrPolicyUrlAll,\r\n    removeAcrPolicyUrl,\r\n    removeAcrPolicyUrlAll,\r\n    removeMemberAcrPolicyUrl,\r\n    removeMemberAcrPolicyUrlAll,\r\n};\r\nconst deprecatedFunctions = {\r\n    createControl: internal_createControl,\r\n    getControl: internal_getControl,\r\n    getAllControl: internal_getControlAll,\r\n    setControl: internal_setControl,\r\n    removeControl: removeControl,\r\n    addPolicyUrl: internal_addPolicyUrl,\r\n    getPolicyUrlAll: internal_getPolicyUrlAll,\r\n    removePolicyUrl: internal_removePolicyUrl,\r\n    removePolicyUrlAll: internal_removePolicyUrlAll,\r\n    addMemberPolicyUrl: internal_addMemberPolicyUrl,\r\n    getMemberPolicyUrlAll: internal_getMemberPolicyUrlAll,\r\n    removeMemberPolicyUrl: internal_getMemberPolicyUrlAll,\r\n    removeMemberPolicyUrlAll: internal_removeMemberPolicyUrlAll,\r\n};\r\n/**\r\n * @hidden\r\n * @deprecated Replaced by [[acp_v2]].\r\n */\r\nconst acp_v1 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, acpAcp), acpPolicy), acpRule), acpMock), v1ControlFunctions), deprecatedFunctions);\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove an [[Control]] from the [[AccessControlResource]] of a Resource.\r\n *\r\n * @param withAccessControlResource A Resource with the Access Control Resource from which to remove an Access Control.\r\n * @param control The [[Control]] to remove from the given Access Control Resource.\r\n * @returns The given Resource with a new Access Control Resource equal to the original Access Control Resource, excluding the given Access Control.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction removeControl(withAccessControlResource, control) {\r\n    const acr = internal_getAcr(withAccessControlResource);\r\n    const updatedAcr = removeThing(acr, control);\r\n    const updatedResource = internal_setAcr(withAccessControlResource, updatedAcr);\r\n    return updatedResource;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/** @hidden */\r\nconst acp_v2 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, acpAcp), acpControl), acpPolicy), acpRule), acpMock);\n\nexport { FetchError, SolidClientError, ThingExpectedError, acp_v1, acp_v2, addBoolean, addDatetime, addDecimal, addInteger, addIri, addLiteral, addMockFallbackAclTo, addMockResourceAclTo, addNamedNode, addStringNoLocale, addStringWithLocale, addTerm, addUrl, asIri, asUrl, changeLogAsMarkdown, createAcl, createAclFromFallbackAcl, createContainerAt, createContainerInContainer, createSolidDataset, createThing, deleteAclFor, deleteContainer, deleteFile, deleteSolidDataset, getAgentAccess, getAgentAccessAll, getAgentDefaultAccess, getAgentDefaultAccessAll, getAgentResourceAccess, getAgentResourceAccessAll, getBoolean, getBooleanAll, getContentType, getDatetime, getDatetimeAll, getDecimal, getDecimalAll, getFallbackAcl, getFile, getFileWithAcl, getGroupAccess, getGroupAccessAll, getGroupDefaultAccess, getGroupDefaultAccessAll, getGroupResourceAccess, getGroupResourceAccessAll, getInteger, getIntegerAll, getIri, getIriAll, getLiteral, getLiteralAll, getNamedNode, getNamedNodeAll, getPodOwner, getPublicAccess, getPublicDefaultAccess, getPublicResourceAccess, getResourceAcl, getResourceInfo, getResourceInfoWithAcl, getSolidDataset, getSolidDatasetWithAcl, getSourceIri, getSourceUrl, getStringByLocaleAll, getStringNoLocale, getStringNoLocaleAll, getStringWithLocale, getStringWithLocaleAll, getTerm, getTermAll, getThing, getThingAll, getUrl, getUrlAll, hasAccessibleAcl, hasAcl, hasFallbackAcl, hasResourceAcl, hasResourceInfo, hasServerResourceInfo, isContainer, isPodOwner, isRawData, isThing, mockContainerFrom, mockFetchError, mockFileFrom, mockSolidDatasetFrom, mockThingFrom, overwriteFile, removeAll, removeBoolean, removeDatetime, removeDecimal, removeInteger, removeIri, removeLiteral, removeNamedNode, removeStringNoLocale, removeStringWithLocale, removeThing, removeUrl, saveAclFor, saveFileInContainer, saveSolidDatasetAt, saveSolidDatasetInContainer, setAgentDefaultAccess, setAgentResourceAccess, setBoolean, setDatetime, setDecimal, setInteger, setIri, setLiteral, setNamedNode, setPublicDefaultAccess, setPublicResourceAccess, setStringNoLocale, setStringWithLocale, setTerm, setThing, setUrl, solidDatasetAsMarkdown, thingAsMarkdown };\n","const rdf = require('@rdfjs/data-model')\nconst DatasetCore = require('./DatasetCore')\n\nfunction dataset (quads) {\n  return new DatasetCore(quads)\n}\n\nmodule.exports = Object.assign({ dataset }, rdf)\n","const isMatch = require('./isMatch')\n\nclass DatasetCore {\n  constructor (quads) {\n    this.quads = new Set()\n\n    if (quads) {\n      for (const quad of quads) {\n        this.quads.add(quad)\n      }\n    }\n  }\n\n  get size () {\n    return this.quads.size\n  }\n\n  add (quad) {\n    if (!this.has(quad)) {\n      this.quads.add(quad)\n    }\n\n    return this\n  }\n\n  delete (quad) {\n    for (const localQuad of this) {\n      if (isMatch(quad, localQuad.subject, localQuad.predicate, localQuad.object, localQuad.graph)) {\n        this.quads.delete(localQuad)\n\n        return this\n      }\n    }\n\n    return this\n  }\n\n  has (quad) {\n    for (const other of this) {\n      if (isMatch(other, quad.subject, quad.predicate, quad.object, quad.graph)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  match (subject, predicate, object, graph) {\n    const matches = new Set()\n\n    for (const quad of this) {\n      if (isMatch(quad, subject, predicate, object, graph)) {\n        matches.add(quad)\n      }\n    }\n\n    return new this.constructor(matches)\n  }\n\n  [Symbol.iterator] () {\n    return this.quads[Symbol.iterator]()\n  }\n}\n\nmodule.exports = DatasetCore\n","function isMatch (quad, subject, predicate, object, graph) {\n  if (subject && !quad.subject.equals(subject)) {\n    return false\n  }\n\n  if (predicate && !quad.predicate.equals(predicate)) {\n    return false\n  }\n\n  if (object && !quad.object.equals(object)) {\n    return false\n  }\n\n  if (graph && !quad.graph.equals(graph)) {\n    return false\n  }\n\n  return true\n}\n\nmodule.exports = isMatch\n"],"sourceRoot":""}