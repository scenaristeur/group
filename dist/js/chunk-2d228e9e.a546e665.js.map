{"version":3,"sources":["webpack:///./node_modules/n3/src/N3StreamParser.js","webpack:///./node_modules/n3/src/N3StreamWriter.js"],"names":["options","super","decodeStrings","this","_readableState","objectMode","parser","N3Parser","onData","onEnd","parse","on","event","callback","error","quad","emit","push","prefix","uri","_transform","chunk","encoding","done","_flush","stream","write","end","_writableState","writer","_writer","N3Writer","addQuad","iri","addPrefix"],"mappings":"89BAKe,MAAM,UAAuB,eAC1C,YAAYA,GACVC,MAAM,CAAEC,eAAe,IACvBC,KAAKC,eAAeC,YAAa,EAGjC,MAAMC,EAAS,IAAIC,EAAA,KAASP,GAC5B,IAAIQ,EAAQC,EACZH,EAAOI,MAAM,CACXC,GAAI,CAACC,EAAOC,KACV,OAAQD,GACR,IAAK,OAAQJ,EAASK,EAAU,MAChC,IAAK,MAASJ,EAAQI,EAAU,SAKlC,CAACC,EAAOC,KAAWD,GAASX,KAAKa,KAAK,QAASF,IAAUC,GAAQZ,KAAKc,KAAKF,IAE3E,CAACG,EAAQC,KAAUhB,KAAKa,KAAK,SAAUE,EAAQC,KAIjDhB,KAAKiB,WAAa,CAACC,EAAOC,EAAUC,KAAWf,EAAOa,GAAQE,KAC9DpB,KAAKqB,OAASD,IAAUd,IAASc,KAInC,OAAOE,GAIL,OAHAA,EAAOd,GAAG,OAASU,IAAWlB,KAAKuB,MAAML,KACzCI,EAAOd,GAAG,MAAS,KAAaR,KAAKwB,QACrCF,EAAOd,GAAG,QAASG,IAAWX,KAAKa,KAAK,QAASF,KAC1CX,MChCI,MAAM,UAAuB,eAC1C,YAAYH,GACVC,MAAM,CAAEqB,SAAU,SAClBnB,KAAKyB,eAAevB,YAAa,EAGjC,MAAMwB,EAAS1B,KAAK2B,QAAU,IAAIC,EAAA,KAAS,CACzCL,MAAO,CAACX,EAAMO,EAAUT,KAAeV,KAAKc,KAAKF,GAAOF,GAAYA,KACpEc,IAAKd,IAAcV,KAAKc,KAAK,MAAOJ,GAAYA,MAC/Cb,GAGHG,KAAKiB,WAAa,CAACL,EAAMO,EAAUC,KAAWM,EAAOG,QAAQjB,EAAMQ,IACnEpB,KAAKqB,OAASD,IAAUM,EAAOF,IAAIJ,IAIrC,OAAOE,GAKL,OAJAA,EAAOd,GAAG,OAAUI,IAAUZ,KAAKuB,MAAMX,KACzCU,EAAOd,GAAG,MAAU,KAAQR,KAAKwB,QACjCF,EAAOd,GAAG,QAAUG,IAAWX,KAAKa,KAAK,QAASF,KAClDW,EAAOd,GAAG,SAAU,CAACO,EAAQe,KAAU9B,KAAK2B,QAAQI,UAAUhB,EAAQe,KAC/D9B,M","file":"js/chunk-2d228e9e.a546e665.js","sourcesContent":["// **N3StreamParser** parses a text stream into a quad stream.\nimport N3Parser from './N3Parser';\nimport { Transform } from 'readable-stream';\n\n// ## Constructor\nexport default class N3StreamParser extends Transform {\n  constructor(options) {\n    super({ decodeStrings: true });\n    this._readableState.objectMode = true;\n\n    // Set up parser with dummy stream to obtain `data` and `end` callbacks\n    const parser = new N3Parser(options);\n    let onData, onEnd;\n    parser.parse({\n      on: (event, callback) => {\n        switch (event) {\n        case 'data': onData = callback; break;\n        case 'end':   onEnd = callback; break;\n        }\n      },\n    },\n      // Handle quads by pushing them down the pipeline\n      (error, quad) => { error && this.emit('error', error) || quad && this.push(quad); },\n      // Emit prefixes through the `prefix` event\n      (prefix, uri) => { this.emit('prefix', prefix, uri); }\n    );\n\n    // Implement Transform methods through parser callbacks\n    this._transform = (chunk, encoding, done) => { onData(chunk); done(); };\n    this._flush = done => { onEnd(); done(); };\n  }\n\n  // ### Parses a stream of strings\n  import(stream) {\n    stream.on('data',  chunk => { this.write(chunk); });\n    stream.on('end',   ()      => { this.end(); });\n    stream.on('error', error => { this.emit('error', error); });\n    return this;\n  }\n}\n","// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer';\n\n// ## Constructor\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({ encoding: 'utf8' });\n    this._writableState.objectMode = true;\n\n    // Set up writer with a dummy stream object\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\n      end: callback => { this.push(null); callback && callback(); },\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\n    this._flush = done => { writer.end(done); };\n  }\n\n// ### Serializes a stream of quads\n  import(stream) {\n    stream.on('data',   quad => { this.write(quad); });\n    stream.on('end',    () => { this.end(); });\n    stream.on('error',  error => { this.emit('error', error); });\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\n    return this;\n  }\n}\n"],"sourceRoot":""}